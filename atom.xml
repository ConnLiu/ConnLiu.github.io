<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leroy</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-14T11:08:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leroy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>201512-4 csp 送货</title>
    <link href="http://yoursite.com/2017/03/14/201512-4-csp-%E9%80%81%E8%B4%A7/"/>
    <id>http://yoursite.com/2017/03/14/201512-4-csp-送货/</id>
    <published>2017-03-14T09:15:35.000Z</published>
    <updated>2017-03-14T11:08:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目思路比较简单，但是细节很多、坑很多，然后我就一一踩了个遍，写了好几天才一百。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>细数一下踩过的坑。</p>
<ol>
<li>欧拉回路、通路存在的首要要求是图是 连通的;</li>
<li>欧拉回路存在的条件是奇度数点个数为0，而欧拉通路存在的条件是奇度数点个数为2；</li>
<li>本题中要求了起始点必须为1；</li>
<li>题中要求输出的欧拉通路路径按字典序输出，那么就要求dfs时要先把各点的邻边排序。</li>
<li>int开1w*1w会超过256MB的限制，但是换成char或bool类型就不会。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 欧拉回路 </span></div><div class="line"><span class="comment">/*无向图欧拉回路算法流程</span></div><div class="line">1.如果此时没有点与该点相连，那么就加入路径中；</div><div class="line">2.如果有点与该点相连，那么就加入队列之中，遍历这些点，直到没有相连的点；</div><div class="line">3.处理当前的点，删除这条走过的边，并在其相邻的点上进行同样的操作，并</div><div class="line">把删除的点加入到路径中。</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100001 </span></div><div class="line"><span class="keyword">int</span> num = <span class="number">1</span>,n ,m;</div><div class="line"><span class="keyword">int</span> match[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">char</span> Array[maxn][maxn]=&#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> Record[maxm];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">	vis[s] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> len = G[s].size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		<span class="keyword">int</span> k = G[s][i];</div><div class="line">		<span class="keyword">if</span>( Array[s][k] &amp;&amp; !vis[k] )&#123;</div><div class="line">			vis[k] = <span class="number">1</span>;</div><div class="line">			dfs(k);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (match[x] == <span class="number">0</span>)</div><div class="line">		Record[num++] = x;</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		</div><div class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = G[x].begin();</div><div class="line">		<span class="keyword">for</span>(; it != G[x].end(); it++)&#123;  <span class="comment">//切记！！！！ 欧拉回路 dfs时候需要按字典序遍历相邻的点 </span></div><div class="line">			<span class="keyword">int</span> k = *it;				<span class="comment">// 所以 G【x】 是升序排列 </span></div><div class="line">			<span class="keyword">if</span> (Array[x][k]!=<span class="number">0</span>)&#123;</div><div class="line">				Array[x][k]--;</div><div class="line">				Array[k][x]--;</div><div class="line">				match[x]--;</div><div class="line">				match[k]--;</div><div class="line">				solve(k);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		Record[num++] = x;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">	<span class="keyword">int</span> m_tmp = m;</div><div class="line">	<span class="keyword">while</span>(m_tmp--)&#123;</div><div class="line">		<span class="keyword">int</span> a,b;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">		G[a].push_back(b);</div><div class="line">		G[b].push_back(a);</div><div class="line">		Array[a][b]++;</div><div class="line">		Array[b][a]++;</div><div class="line">		match[a]++;</div><div class="line">		match[b]++;</div><div class="line">	&#125;</div><div class="line">	dfs(<span class="number">1</span>);</div><div class="line">	<span class="keyword">int</span> oddCnt = <span class="number">0</span>, start = n;</div><div class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">		sort(G[i].begin(),G[i].end(),less&lt;<span class="keyword">int</span>&gt;());</div><div class="line">		<span class="keyword">if</span>( match[i]%<span class="number">2</span> == <span class="number">1</span> )&#123;</div><div class="line">			oddCnt++;</div><div class="line">			start = min(start,i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( !vis[i] ) flag = <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( !flag )&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>( oddCnt == <span class="number">0</span> )&#123;</div><div class="line">		start = <span class="number">1</span>;</div><div class="line">		solve(<span class="number">1</span>);</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;start;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=num<span class="number">-2</span>; i&gt;<span class="number">0</span>; i--)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;Record[i];</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>( oddCnt == <span class="number">2</span> &amp;&amp; start == <span class="number">1</span>)&#123;</div><div class="line">		solve(<span class="number">1</span>);</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;start;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=num<span class="number">-2</span>; i&gt;<span class="number">0</span>; i--)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;Record[i];</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目思路比较简单，但是细节很多、坑很多，然后我就一一踩了个遍，写了好几天才一百。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201409-4 csp 最优配餐</title>
    <link href="http://yoursite.com/2017/03/14/201409-4-csp-%E6%9C%80%E4%BC%98%E9%85%8D%E9%A4%90/"/>
    <id>http://yoursite.com/2017/03/14/201409-4-csp-最优配餐/</id>
    <published>2017-03-14T09:15:13.000Z</published>
    <updated>2017-03-14T11:09:21.648Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目思路比较简单，就是一个bfs的思想。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>嗯，虽然只是一个简单的bfs思想就可以解决，但是。。。。。</p>
<p>此题有坑点！！！！</p>
<p>虽然题目说了xi，yi是方格图中的横坐标和纵坐标，而且还没有给出它们的范围，没想到居然默认是大于0的，所谓的n*n方格图中坐标范围却是1-n非0 - n-1.</p>
<p>除此之外，100分到手。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1001</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 99999999</span></div><div class="line"><span class="keyword">struct</span> point&#123;</div><div class="line">	<span class="keyword">int</span> x,y;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> guest&#123;</div><div class="line">	<span class="keyword">int</span> x, y, need;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> stone[maxn][maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> n, m, k, d;</div><div class="line"><span class="built_in">vector</span>&lt;point&gt; shop;</div><div class="line"><span class="built_in">vector</span>&lt;guest&gt; guests;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>( x&lt;=<span class="number">0</span> || x&gt;n || y&lt;=<span class="number">0</span> || y&gt;n || stone[x][y])&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(point p)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> cost = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> x = p.x, y = p.y;</div><div class="line">	<span class="built_in">map</span>[x][y] = <span class="number">0</span>;</div><div class="line">	<span class="built_in">queue</span>&lt;point&gt; q;</div><div class="line">	q.push(p);</div><div class="line">	<span class="keyword">while</span>( !q.empty() )&#123;</div><div class="line">		p = q.front();</div><div class="line">		q.pop();</div><div class="line">		x = p.x, y = p.y;</div><div class="line">		cost = <span class="built_in">map</span>[x][y];</div><div class="line">		<span class="keyword">if</span>( judge(x,y+<span class="number">1</span>) &amp;&amp; <span class="built_in">map</span>[x][y+<span class="number">1</span>] &gt; cost+<span class="number">1</span>)&#123;</div><div class="line">			<span class="built_in">map</span>[x][y+<span class="number">1</span>] = cost + <span class="number">1</span>;</div><div class="line">			q.push((point)&#123;x,y+<span class="number">1</span>&#125;);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( judge(x+<span class="number">1</span>,y) &amp;&amp; <span class="built_in">map</span>[x+<span class="number">1</span>][y] &gt; cost+<span class="number">1</span> )&#123;</div><div class="line">			<span class="built_in">map</span>[x+<span class="number">1</span>][y] = cost + <span class="number">1</span>;</div><div class="line">			q.push((point)&#123;x+<span class="number">1</span>,y&#125;);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( judge(x<span class="number">-1</span>,y) &amp;&amp; <span class="built_in">map</span>[x<span class="number">-1</span>][y] &gt; cost+<span class="number">1</span> )&#123;</div><div class="line">			<span class="built_in">map</span>[x<span class="number">-1</span>][y] = cost + <span class="number">1</span>;</div><div class="line">			q.push((point)&#123;x<span class="number">-1</span>,y&#125;);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( judge(x,y<span class="number">-1</span>) &amp;&amp; <span class="built_in">map</span>[x][y<span class="number">-1</span>] &gt; cost+<span class="number">1</span> )&#123;</div><div class="line">			<span class="built_in">map</span>[x][y<span class="number">-1</span>] = cost + <span class="number">1</span>;</div><div class="line">			q.push((point)&#123;x,y<span class="number">-1</span>&#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;d;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;<span class="comment">//分店</span></div><div class="line">		<span class="keyword">int</span> a,b;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">		shop.push_back((point)&#123;a,b&#125;);</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;<span class="comment">//客户 </span></div><div class="line">		<span class="keyword">int</span> a,b,c;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</div><div class="line">		guests.push_back((guest)&#123;a,b,c&#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;d; i++)&#123;<span class="comment">//障碍点 </span></div><div class="line">		<span class="keyword">int</span> a,b;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">		stone[a][b] = <span class="literal">true</span>;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; j++)</div><div class="line">			<span class="built_in">map</span>[i][j] = INF;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">int</span> len = shop.size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</div><div class="line">		bfs(shop[i]); </div><div class="line"><span class="comment">//	for(int j=n-1; j&gt;=0; j--)&#123;  // 为了打印出消费矩阵 </span></div><div class="line"><span class="comment">//		for(int i=0; i&lt;n; i++)&#123;</span></div><div class="line"><span class="comment">//			if( map[i][j] == INF)	cout&lt;&lt;"-1"&lt;&lt;"\t";</span></div><div class="line"><span class="comment">//			else cout&lt;&lt;map[i][j]&lt;&lt;"\t";</span></div><div class="line"><span class="comment">//		&#125;</span></div><div class="line"><span class="comment">//			</span></div><div class="line"><span class="comment">//		cout&lt;&lt;endl;</span></div><div class="line"><span class="comment">//	&#125;</span></div><div class="line">	len = guests.size();</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">		<span class="keyword">int</span> x = guests[i].x, y = guests[i].y, need = guests[i].need;</div><div class="line">		res += <span class="built_in">map</span>[x][y] * need;</div><div class="line">	&#125; </div><div class="line">	<span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目思路比较简单，就是一个bfs的思想。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201412-3 csp 集合竞价</title>
    <link href="http://yoursite.com/2017/03/13/201412-3-csp-%E9%9B%86%E5%90%88%E7%AB%9E%E4%BB%B7/"/>
    <id>http://yoursite.com/2017/03/13/201412-3-csp-集合竞价/</id>
    <published>2017-03-13T14:12:01.000Z</published>
    <updated>2017-03-14T11:11:56.769Z</updated>
    
    <content type="html"><![CDATA[<p>对于没有接触过股市的我来说，这道题目题面就有一点点复杂，后来虽然了然于心了，但是还差一点，终于80分。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>虽然我已经注意到了，要用long long类型存储，可是依然80分。</p>
<p>思路待补充。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3.5  80分 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SELL 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUY 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CANCEL 2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CAN_S 3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CAN_B 4</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</div><div class="line">	<span class="keyword">int</span> type;</div><div class="line">	<span class="keyword">float</span> f;</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> t;</div><div class="line">&#125;Node;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123; <span class="comment">// 总卖出量 和买进量 </span></div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> sell;</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> buy;</div><div class="line">&#125;Res;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,Node&gt; cmd; </div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; del;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">float</span>,Res&gt; out;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="built_in">string</span> str;</div><div class="line">	<span class="keyword">int</span> i=<span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</div><div class="line">		<span class="keyword">float</span> f;</div><div class="line">		<span class="keyword">long</span> <span class="keyword">long</span> t;</div><div class="line">		Node tmp;</div><div class="line">		<span class="keyword">if</span>(str == <span class="string">"sell"</span>)&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;f&gt;&gt;t;</div><div class="line">			tmp.type = SELL;</div><div class="line">			tmp.f = f;</div><div class="line">			tmp.t = t;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(str == <span class="string">"buy"</span>)&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;f&gt;&gt;t;</div><div class="line">			tmp.type = BUY;</div><div class="line">			tmp.f = f;</div><div class="line">			tmp.t = t;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( str == <span class="string">"cancel"</span> )&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">			tmp.type = CANCEL;</div><div class="line">			tmp.t = t;</div><div class="line">			del.push_back(t);</div><div class="line">		&#125;</div><div class="line">		cmd[i] = tmp;</div><div class="line">		i++;</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 执行cancel操作 </span></div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it_del = del.begin();</div><div class="line">	<span class="keyword">while</span>(it_del != del.end())&#123;</div><div class="line">		<span class="keyword">if</span>( cmd[*it_del].type == CAN_S )&#123;</div><div class="line">			cmd[*it_del].type = SELL;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( cmd[*it_del].type == CAN_B )&#123;</div><div class="line">			cmd[*it_del].type = BUY;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( cmd[*it_del].type == BUY )&#123;</div><div class="line">			cmd[*it_del].type = CAN_B;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( cmd[*it_del].type == SELL )&#123;</div><div class="line">			cmd[*it_del].type = CAN_S;</div><div class="line">		&#125;</div><div class="line">		it_del++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">map</span>&lt;<span class="keyword">int</span>,Node&gt;::iterator it_cmd = cmd.begin();</div><div class="line">	<span class="keyword">float</span> buy_min = <span class="number">10000</span>, sell_max = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>( it_cmd != cmd.end() )&#123;</div><div class="line">		<span class="keyword">if</span>( it_cmd-&gt;second.type == BUY )&#123;</div><div class="line"><span class="comment">//			cout&lt;&lt;it_cmd-&gt;first&lt;&lt;" buy:"&lt;&lt;it_cmd-&gt;second.t&lt;&lt;endl; </span></div><div class="line">			<span class="keyword">float</span> f = it_cmd-&gt;second.f;</div><div class="line">			<span class="keyword">long</span> <span class="keyword">long</span> t = it_cmd-&gt;second.t;</div><div class="line">			<span class="keyword">if</span>( f&lt;buy_min )&#123;</div><div class="line">				buy_min = f;</div><div class="line">			&#125; </div><div class="line">			Res res;</div><div class="line">			<span class="keyword">if</span>( out.find(f) == out.end() )&#123;  <span class="comment">//不存在 </span></div><div class="line">				res.buy = t;</div><div class="line">				res.sell = <span class="number">0</span>;</div><div class="line">				out[f] = res;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				res = out[f];</div><div class="line">				res.buy += t;</div><div class="line">				out[f] = res;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( it_cmd-&gt;second.type == SELL )&#123;</div><div class="line">			<span class="keyword">float</span> f = it_cmd-&gt;second.f;</div><div class="line">			<span class="keyword">long</span> <span class="keyword">long</span> t = it_cmd-&gt;second.t;</div><div class="line">			<span class="keyword">if</span>( f&gt;sell_max )&#123;</div><div class="line">				sell_max = f;</div><div class="line">			&#125; </div><div class="line">			Res res;</div><div class="line">			<span class="keyword">if</span>( out.find(f) == out.end() )&#123;</div><div class="line">				res.buy = <span class="number">0</span>;</div><div class="line">				res.sell = t;</div><div class="line">				out[f] = res;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				res = out[f];</div><div class="line">				res.sell += t;</div><div class="line">				out[f] = res;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		it_cmd++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">map</span>&lt;<span class="keyword">float</span>,Res&gt;::iterator it_out = out.begin();</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> total = <span class="number">0</span>;</div><div class="line">	<span class="comment">// sell add-all</span></div><div class="line">	<span class="keyword">while</span>(it_out != out.end())&#123;</div><div class="line">		Res res = it_out-&gt;second;</div><div class="line">		<span class="keyword">float</span> f = it_out-&gt;first;</div><div class="line">		res.sell += total;</div><div class="line">		total = res.sell;</div><div class="line">		it_out-&gt;second = res;</div><div class="line">		it_out++;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	it_out = out.end();</div><div class="line">	it_out--;</div><div class="line">	total = <span class="number">0</span>;</div><div class="line">	<span class="comment">// buy add-all</span></div><div class="line">	<span class="keyword">while</span>( it_out != out.begin())&#123;</div><div class="line">		Res res = it_out-&gt;second;</div><div class="line">		<span class="keyword">float</span> f = it_out-&gt;first;</div><div class="line">		res.buy += total;</div><div class="line">		total = res.buy;</div><div class="line">		it_out-&gt;second = res;</div><div class="line">		it_out--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( it_out==out.begin())&#123;</div><div class="line">		Res res = it_out-&gt;second;</div><div class="line">		res.buy += total;</div><div class="line">		total = res.buy;</div><div class="line">		it_out-&gt;second = res;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	it_out = out.end();</div><div class="line">	it_out--; </div><div class="line">	<span class="keyword">float</span> acc_f = it_out-&gt;first;</div><div class="line">	Res acc_tmp = it_out-&gt;second;</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">acc_t</span> = acc_tmp.buy &gt; acc_tmp.sell ? acc_tmp.sell:acc_tmp.buy;</div><div class="line">	</div><div class="line">	<span class="keyword">while</span>( it_out != out.begin() )&#123; <span class="comment">// max-&gt;min</span></div><div class="line">		Res res = it_out-&gt;second;</div><div class="line">		<span class="keyword">float</span> f = it_out-&gt;first;</div><div class="line">		<span class="keyword">if</span>( f &lt; buy_min ) <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">int</span> dim = res.buy &gt; res.sell ? res.sell:res.buy;</div><div class="line">		<span class="keyword">if</span>(dim &gt; <span class="keyword">acc_t</span>)&#123;</div><div class="line">			<span class="keyword">acc_t</span> = dim;</div><div class="line">			acc_f = f; </div><div class="line">		&#125;</div><div class="line">		it_out--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( it_out==out.begin() &amp;&amp; it_out-&gt;first&gt;=buy_min)&#123;</div><div class="line">		Res res = it_out-&gt;second;</div><div class="line">		<span class="keyword">float</span> f = it_out-&gt;first;</div><div class="line">		<span class="keyword">int</span> dim = res.buy &gt; res.sell ? res.sell:res.buy;</div><div class="line">		<span class="keyword">if</span>(dim &gt; <span class="keyword">acc_t</span>)&#123;</div><div class="line">			<span class="keyword">acc_t</span> = dim;</div><div class="line">			acc_f = f; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%.2f "</span>,acc_f);</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="keyword">acc_t</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于没有接触过股市的我来说，这道题目题面就有一点点复杂，后来虽然了然于心了，但是还差一点，终于80分。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201409-3 csp 字符串匹配</title>
    <link href="http://yoursite.com/2017/03/13/201409-3-csp-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <id>http://yoursite.com/2017/03/13/201409-3-csp-字符串匹配/</id>
    <published>2017-03-13T14:08:19.000Z</published>
    <updated>2017-03-14T11:09:31.712Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目思路简单，借助string的一些函数，手到擒来。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>嗯，string是个好东西，要好好学习。</p>
<p>transform(tmp_v.begin(), tmp_v.end(), tmp_v.begin(), ::toupper);</p>
<p>这个大小写转换函数（algorithm库中）也是十分好用。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> case_big,n;</div><div class="line">	<span class="built_in">string</span> s0;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v_str;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;s0&gt;&gt;case_big&gt;&gt;n;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">		<span class="built_in">string</span> s;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s;</div><div class="line">		v_str.push_back(s);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it = v_str.begin();</div><div class="line">	<span class="keyword">if</span>(case_big)&#123; <span class="comment">//大小写敏感 </span></div><div class="line">		<span class="keyword">while</span>( it != v_str.end() )&#123;</div><div class="line">			<span class="keyword">if</span>( (*it).find( s0 ) != <span class="number">-1</span>)&#123;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			&#125;</div><div class="line">			it++;</div><div class="line">		&#125; </div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="comment">// transform </span></div><div class="line">		transform(s0.begin(), s0.end(), s0.begin(), ::<span class="built_in">toupper</span>);</div><div class="line">		<span class="keyword">while</span>( it != v_str.end() )&#123;</div><div class="line">			<span class="built_in">string</span> tmp_v = *it;</div><div class="line">			transform(tmp_v.begin(), tmp_v.end(), tmp_v.begin(), ::<span class="built_in">toupper</span>);</div><div class="line">			<span class="keyword">if</span>( tmp_v.find( s0 ) != <span class="number">-1</span>)&#123;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			&#125;</div><div class="line">			it++;</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目思路简单，借助string的一些函数，手到擒来。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201503-3 csp 节日</title>
    <link href="http://yoursite.com/2017/03/13/201503-3-csp-%E8%8A%82%E6%97%A5/"/>
    <id>http://yoursite.com/2017/03/13/201503-3-csp-节日/</id>
    <published>2017-03-13T14:03:50.000Z</published>
    <updated>2017-03-14T11:09:07.056Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目思路简单，而且便于测试，只要随便找个日子对一对就OK。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先找到每一年的第一天是周几。</p>
<p>再找到当月第一天是周几。</p>
<p>再找到当月第一个周c为几号。</p>
<p>然后答案就在眼前了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_four</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>( year % <span class="number">400</span> == <span class="number">0</span> )&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>( year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span> )&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> a,b,c,y1,y2,first[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">int</span> month[ ] = &#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</div><div class="line">	<span class="keyword">int</span> dim = <span class="number">0</span>;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;y1&gt;&gt;y2;</div><div class="line">	first[<span class="number">0</span>] = <span class="number">2</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)&#123;</div><div class="line">		<span class="keyword">if</span>( is_four(i+<span class="number">1850</span><span class="number">-1</span>) )&#123; <span class="comment">//判断前一年是否闰年 </span></div><div class="line">			first[i] = first[i<span class="number">-1</span>] + <span class="number">2</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			first[i] = first[i<span class="number">-1</span>] + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( first[i] &gt;<span class="number">7</span> ) first[i] -= <span class="number">7</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//从1月1号 到 a月1号 有多少天 </span></div><div class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;a; i++)&#123;</div><div class="line">		dim += month[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( y1&gt;y2 )&#123;</div><div class="line">		<span class="keyword">int</span> tmp = y1;</div><div class="line">		y1 = y2;</div><div class="line">		y2 = tmp;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 之前一直60分， 因为每次都在用同一个量 dim ！！！ 不亦悲哉 </span></div><div class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i=y1; i&lt;=y2; i++)&#123;</div><div class="line">		<span class="keyword">int</span> dis = dim;</div><div class="line">		<span class="keyword">if</span> ( a &gt; <span class="number">2</span> &amp;&amp; is_four(i) )&#123;</div><div class="line">			dis++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> day1 = (dis%<span class="number">7</span>) + first[ i <span class="number">-1850</span> ]; <span class="comment">//本月第一天是星期几 </span></div><div class="line">		<span class="comment">//找到 第一个星期c 是几号</span></div><div class="line">		<span class="keyword">int</span> imp = c-day1 + <span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span>( imp &lt; <span class="number">1</span>)&#123;</div><div class="line">			imp += <span class="number">7</span>;	</div><div class="line">		&#125; </div><div class="line">		<span class="comment">//找到 第b个星期c 是几号</span></div><div class="line">		imp += (b<span class="number">-1</span>)*<span class="number">7</span>;</div><div class="line">		<span class="keyword">if</span>( imp &lt;= month[a] &amp;&amp; imp&gt;<span class="number">0</span> )&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d/%02d/%02d\n"</span>,i,a,imp);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( a==<span class="number">2</span> &amp;&amp; is_four(i) &amp;&amp; imp == <span class="number">29</span>)&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d/%02d/%02d\n"</span>,i,a,imp);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"none\n"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目思路简单，而且便于测试，只要随便找个日子对一对就OK。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201509-3 csp 模板生成系统</title>
    <link href="http://yoursite.com/2017/03/13/201509-3-csp-%E6%A8%A1%E6%9D%BF%E7%94%9F%E6%88%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2017/03/13/201509-3-csp-模板生成系统/</id>
    <published>2017-03-13T13:59:25.000Z</published>
    <updated>2017-03-14T11:31:43.888Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目细节很重要，注意一些特殊的情况。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><pre><code>比如 name “{{ address }}” 的情况，不能把替换之后的{{ address }}当成变量替换了（其中address也要考虑为email时）。

    比如 name “{{ name }}” 的情况，不能把替换之后的{{ name }}递归替换。
</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> m,n;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; total_s;</div><div class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; value;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</div><div class="line">	<span class="built_in">cin</span>.ignore();</div><div class="line">	<span class="keyword">while</span>(m--)&#123;</div><div class="line">		<span class="built_in">string</span> s0;</div><div class="line">		getline(<span class="built_in">cin</span>,s0);</div><div class="line">		total_s.push_back(s0);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span>(n--)&#123;</div><div class="line">		<span class="built_in">string</span> s0,s1;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s0;</div><div class="line">		<span class="built_in">cin</span>.ignore();</div><div class="line">		getline(<span class="built_in">cin</span>,s1);</div><div class="line">		value[s0] = s1.substr(<span class="number">1</span>,s1.size()<span class="number">-2</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it_s = total_s.begin();</div><div class="line">	<span class="keyword">while</span>( it_s != total_s.end() )&#123;</div><div class="line">		<span class="built_in">string</span> s0 = *it_s;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> pos = s0.find(<span class="string">"&#123;&#123; "</span>);</div><div class="line">		<span class="keyword">while</span>( pos != <span class="number">-1</span> )&#123;</div><div class="line">			<span class="keyword">int</span> j = pos+<span class="number">2</span>;</div><div class="line">			<span class="keyword">while</span>( s0[j<span class="number">-1</span>] != <span class="string">'&#125;'</span> || s0[j] != <span class="string">'&#125;'</span>)	j++;</div><div class="line">			<span class="built_in">string</span> tmp = s0.substr(pos,j-pos+<span class="number">1</span>);</div><div class="line">			<span class="keyword">bool</span> flag_value = <span class="literal">false</span>;</div><div class="line">			<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;::iterator it_m = value.begin();</div><div class="line">			<span class="keyword">while</span>( it_m != value.end() )&#123;</div><div class="line">				<span class="keyword">if</span>( tmp == <span class="string">"&#123;&#123; "</span>+ it_m-&gt;first +<span class="string">" &#125;&#125;"</span>) &#123;</div><div class="line">					flag_value = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;	</div><div class="line">				&#125;</div><div class="line">				it_m++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>( !flag_value )</div><div class="line">				s0.replace(pos,j-pos+<span class="number">1</span>,<span class="string">""</span>);</div><div class="line">			<span class="keyword">int</span> n_pos = s0.find(<span class="string">"&#123;&#123; "</span>,pos);</div><div class="line">			<span class="keyword">if</span>( n_pos == pos) <span class="keyword">break</span>;</div><div class="line">			pos = n_pos;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;::iterator it_m = value.begin();</div><div class="line">		<span class="keyword">while</span>( it_m != value.end() )&#123;</div><div class="line">			<span class="built_in">string</span> name = <span class="string">"&#123;&#123; "</span>+it_m-&gt;first+<span class="string">" &#125;&#125;"</span>;</div><div class="line">			<span class="keyword">if</span>( name == it_m-&gt;second)&#123;</div><div class="line">				it_m++;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125; </div><div class="line">			<span class="keyword">int</span> pos = s0.find(name);</div><div class="line">			<span class="keyword">while</span>( pos != <span class="number">-1</span>)&#123;</div><div class="line">				s0.replace(pos,name.size(),it_m-&gt;second);</div><div class="line">				pos = s0.find(name);</div><div class="line">			&#125;</div><div class="line">			it_m++;</div><div class="line">		&#125;</div><div class="line">		*it_s = s0;</div><div class="line">		it_s++;</div><div class="line">	&#125;</div><div class="line">	it_s = total_s.begin();</div><div class="line">	<span class="keyword">while</span>( it_s != total_s.end() )&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;*it_s&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		it_s++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目细节很重要，注意一些特殊的情况。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201512-3 csp 画图</title>
    <link href="http://yoursite.com/2017/03/13/201512-3-csp-%E7%94%BB%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/03/13/201512-3-csp-画图/</id>
    <published>2017-03-13T13:50:26.000Z</published>
    <updated>2017-03-14T11:08:51.428Z</updated>
    
    <content type="html"><![CDATA[<p>这道题写出来不难，但是有个小细节要注意。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p> 唯一的一个小细节。</p>
<p>画直线时，可能遇到的情况有三种：+、-、|。分别对应不同的处理。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line"><span class="keyword">int</span> m,n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">color</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>( a&lt;<span class="number">0</span> || a&gt;=m || b&lt;<span class="number">0</span> || b&gt;=n ||  <span class="built_in">map</span>[a][b] == c</div><div class="line">	|| <span class="built_in">map</span>[a][b] == <span class="string">'-'</span>|| <span class="built_in">map</span>[a][b] == <span class="string">'|'</span>|| <span class="built_in">map</span>[a][b] == <span class="string">'+'</span>)&#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">map</span>[a][b] = c;</div><div class="line">	color(a,b+<span class="number">1</span>,c);</div><div class="line">	color(a,b<span class="number">-1</span>,c);</div><div class="line">	color(a+<span class="number">1</span>,b,c);</div><div class="line">	color(a<span class="number">-1</span>,b,c);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> q,type,a,b,c,d;</div><div class="line">	<span class="keyword">char</span> ch;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;q;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</div><div class="line">			<span class="built_in">map</span>[j][i] = <span class="number">-1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span>(q--)&#123;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;type;</div><div class="line">		<span class="keyword">if</span>(type == <span class="number">0</span>)&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</div><div class="line">			<span class="keyword">if</span>( a == c)&#123;</div><div class="line">				<span class="keyword">if</span>( b &gt; d )&#123;</div><div class="line">					<span class="keyword">int</span> tmp = b;</div><div class="line">					b = d;</div><div class="line">					d = tmp;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=b;i&lt;=d;i++)&#123;</div><div class="line">					<span class="keyword">if</span>( <span class="built_in">map</span>[a][i] == <span class="string">'-'</span> )&#123;</div><div class="line">						<span class="built_in">map</span>[a][i] = <span class="string">'+'</span>;</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[a][i] == <span class="string">'+'</span> )&#123;</div><div class="line">						</div><div class="line">					&#125; </div><div class="line">					<span class="keyword">else</span></div><div class="line">						<span class="built_in">map</span>[a][i] = <span class="string">'|'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">if</span>( a&gt;c )&#123;</div><div class="line">					<span class="keyword">int</span> tmp = a;</div><div class="line">					a = c;</div><div class="line">					c = tmp;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=c;i++)&#123;</div><div class="line">					<span class="keyword">if</span>( <span class="built_in">map</span>[i][b] == <span class="string">'|'</span> )&#123;</div><div class="line">						<span class="built_in">map</span>[i][b] = <span class="string">'+'</span>;</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[i][b] == <span class="string">'+'</span> )&#123;</div><div class="line">						</div><div class="line">					&#125;<span class="keyword">else</span></div><div class="line">						<span class="built_in">map</span>[i][b] = <span class="string">'-'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;ch;</div><div class="line">			color(a,b,ch);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>[j][i] == <span class="number">-1</span>)&#123;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">'.'</span>;</div><div class="line">			&#125;<span class="keyword">else</span></div><div class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="built_in">map</span>[j][i];</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题写出来不难，但是有个小细节要注意。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201604-3 csp 路径解析</title>
    <link href="http://yoursite.com/2017/03/13/201604-3-csp-%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2017/03/13/201604-3-csp-路径解析/</id>
    <published>2017-03-13T13:49:41.000Z</published>
    <updated>2017-03-14T11:07:43.877Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目思路很重要，一定不要想多了。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>不要建树。</p>
<p>不要建树。</p>
<p>不要建树。</p>
<p>因为这个字符串是有规律的，因而不需要建树来保存它们的关系，具体看代码吧，十分容易理解。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">string</span> pos_s;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; out;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;pos_s;</div><div class="line">	<span class="built_in">cin</span>.ignore();</div><div class="line">	<span class="keyword">while</span>(n--)&#123;</div><div class="line">		<span class="built_in">string</span> tmp;</div><div class="line">		<span class="keyword">int</span> pos = <span class="number">0</span>; </div><div class="line">		getline(<span class="built_in">cin</span>,tmp);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(tmp[<span class="number">0</span>] != <span class="string">'/'</span>)&#123; <span class="comment">//相对路径 </span></div><div class="line">			tmp = pos_s + <span class="string">'/'</span> + tmp;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(tmp.empty())&#123;</div><div class="line">			out.push_back(pos_s);</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//消除多个 // </span></div><div class="line">		pos = tmp.find_first_of(<span class="string">'/'</span>);</div><div class="line">		pos++;</div><div class="line">		<span class="keyword">while</span>( pos &lt; tmp.size() &amp;&amp; pos != <span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(tmp[pos<span class="number">-1</span>] == <span class="string">'/'</span> &amp;&amp; tmp[pos] == <span class="string">'/'</span>)&#123;</div><div class="line">				<span class="keyword">int</span> j = pos;</div><div class="line">				<span class="keyword">while</span>(tmp[j] == <span class="string">'/'</span>) j++;</div><div class="line">				tmp.erase(pos,j-pos);   <span class="comment">// 开始位置，删除数量 </span></div><div class="line">			&#125;</div><div class="line">			pos++;</div><div class="line">		&#125;</div><div class="line">		pos = tmp.find(<span class="string">"/./"</span>);</div><div class="line">		<span class="keyword">while</span>( pos != <span class="number">-1</span>)&#123;</div><div class="line">			tmp.erase(pos,<span class="number">2</span>);</div><div class="line">			pos = tmp.find(<span class="string">"/./"</span>);</div><div class="line">		&#125; </div><div class="line">		pos = tmp.find(<span class="string">"/../"</span>);</div><div class="line">		<span class="keyword">while</span>( pos != <span class="number">-1</span>)&#123;</div><div class="line">			tmp.erase(pos+<span class="number">1</span>,<span class="number">3</span>);</div><div class="line">			<span class="keyword">int</span> pre = pos<span class="number">-1</span>;</div><div class="line">			<span class="keyword">while</span>( pre &gt;=<span class="number">0</span> &amp;&amp; tmp[pre] != <span class="string">'/'</span>) pre--;</div><div class="line">			<span class="keyword">if</span>( pre != <span class="number">-1</span>)&#123;</div><div class="line">				tmp.erase(pre,pos-pre);</div><div class="line">			&#125;</div><div class="line">			pos = tmp.find(<span class="string">"/../"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( tmp.size() != <span class="number">1</span> &amp;&amp; tmp[tmp.size()<span class="number">-1</span>] == <span class="string">'/'</span>)&#123;</div><div class="line">			tmp.erase(tmp.size()<span class="number">-1</span>,<span class="number">1</span>);</div><div class="line">		&#125; </div><div class="line">		out.push_back(tmp);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;out.size();i++)</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;out[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目思路很重要，一定不要想多了。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201609-3 csp 炉石传说</title>
    <link href="http://yoursite.com/2017/03/13/201609-3-csp-%E7%82%89%E7%9F%B3%E4%BC%A0%E8%AF%B4/"/>
    <id>http://yoursite.com/2017/03/13/201609-3-csp-炉石传说/</id>
    <published>2017-03-13T13:46:34.000Z</published>
    <updated>2017-03-14T11:08:09.274Z</updated>
    
    <content type="html"><![CDATA[<p>较近一次的csp题目，依旧是典型的模拟题。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>依照题意，一步一步模拟即可，十分简单。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</div><div class="line">	<span class="keyword">int</span> health;</div><div class="line">	<span class="keyword">int</span> attack;</div><div class="line">&#125;Role;</div><div class="line"><span class="built_in">vector</span>&lt;Role&gt; f_role;</div><div class="line"><span class="built_in">vector</span>&lt;Role&gt; s_role;</div><div class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">summon</span><span class="params">(<span class="keyword">bool</span> is_first, <span class="keyword">int</span> pos, <span class="keyword">int</span> att, <span class="keyword">int</span> heal)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(is_first)&#123;<span class="comment">// f_role 回合 </span></div><div class="line">		Role role;	</div><div class="line">		role.health = heal;</div><div class="line">		role.attack = att;</div><div class="line">		<span class="keyword">if</span>( pos==f_role.size() )&#123;</div><div class="line">			f_role.push_back(role);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			f_role.insert(f_role.begin()+pos,role);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		Role role;	</div><div class="line">		role.health = heal;</div><div class="line">		role.attack = att;</div><div class="line">		<span class="keyword">if</span>( pos==s_role.size() )&#123;</div><div class="line">			s_role.push_back(role);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			s_role.insert(s_role.begin()+pos,role);</div><div class="line">		&#125;</div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">(<span class="keyword">bool</span> is_first, <span class="keyword">int</span> from_pos, <span class="keyword">int</span> to_pos)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(is_first)&#123;<span class="comment">// f_role 回合 </span></div><div class="line">		f_role[from_pos].health -= s_role[to_pos].attack;</div><div class="line">		s_role[to_pos].health -= f_role[from_pos].attack;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>( f_role[from_pos].health &lt;= <span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(from_pos == <span class="number">0</span>)&#123;</div><div class="line">				res = <span class="number">-1</span>;    <span class="comment">//后手玩家获胜 </span></div><div class="line">			&#125;<span class="keyword">else</span>	</div><div class="line">			f_role.erase(f_role.begin()+from_pos);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(s_role[to_pos].health &lt;= <span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(to_pos == <span class="number">0</span>)&#123;</div><div class="line">				res = <span class="number">1</span>;    <span class="comment">//先手玩家获胜 </span></div><div class="line">			&#125;<span class="keyword">else</span></div><div class="line">			s_role.erase(s_role.begin()+to_pos);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		f_role[to_pos].health -= s_role[from_pos].attack;</div><div class="line">		s_role[from_pos].health -= f_role[to_pos].attack;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(f_role[to_pos].health &lt;= <span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(to_pos == <span class="number">0</span>)&#123;</div><div class="line">				res = <span class="number">-1</span>;    <span class="comment">//后手玩家获胜 </span></div><div class="line">			&#125;<span class="keyword">else</span></div><div class="line">			f_role.erase(f_role.begin()+to_pos);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>( s_role[from_pos].health &lt;= <span class="number">0</span> )&#123;</div><div class="line">			<span class="keyword">if</span>(from_pos == <span class="number">0</span>)&#123;</div><div class="line">				res = <span class="number">1</span>;    <span class="comment">//先手玩家获胜 </span></div><div class="line">			&#125;<span class="keyword">else</span></div><div class="line">			s_role.erase(s_role.begin()+from_pos);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	Role role;</div><div class="line">	<span class="keyword">bool</span> is_first = <span class="literal">true</span>;</div><div class="line">	</div><div class="line">	role.health = <span class="number">30</span>;</div><div class="line">	role.attack = <span class="number">0</span>;</div><div class="line">	f_role.push_back(role);</div><div class="line">	s_role.push_back(role);</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">	</div><div class="line">	<span class="keyword">while</span>(n--)&#123;</div><div class="line">		<span class="built_in">string</span> s0;</div><div class="line">		<span class="keyword">int</span> a,b,c;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s0;</div><div class="line">		<span class="keyword">if</span>(s0 == <span class="string">"summon"</span>)&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</div><div class="line">			summon(is_first,a,b,c);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s0 == <span class="string">"attack"</span>)&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">			attack(is_first,a,b);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s0 == <span class="string">"end"</span>)&#123;</div><div class="line">			is_first = !is_first;</div><div class="line">		&#125;</div><div class="line">	&#125; </div><div class="line">	<span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;f_role[<span class="number">0</span>].health&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">vector</span>&lt;Role&gt;::iterator it = f_role.begin();</div><div class="line">	it++;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;f_role.size()<span class="number">-1</span>;</div><div class="line">	<span class="keyword">while</span>(it!=f_role.end())&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;it-&gt;health;</div><div class="line">		it++;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;s_role[<span class="number">0</span>].health&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	it = s_role.begin();</div><div class="line">	it++;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;s_role.size()<span class="number">-1</span>;</div><div class="line">	<span class="keyword">while</span>(it!=s_role.end())&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;it-&gt;health;</div><div class="line">		it++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;较近一次的csp题目，依旧是典型的模拟题。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201612-3 csp 权限查询</title>
    <link href="http://yoursite.com/2017/03/13/201612-3-csp-%E6%9D%83%E9%99%90%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2017/03/13/201612-3-csp-权限查询/</id>
    <published>2017-03-13T13:40:07.000Z</published>
    <updated>2017-03-14T11:07:58.986Z</updated>
    
    <content type="html"><![CDATA[<p>这是最近一次的csp题目，第三题就是典型的模拟题，并且这题还非常地大。。。俗称大模拟<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>依照题意，一步一步模拟即可。</p>
<p>两个注意点：使用map会十分方便，权限种类10种是0-9而非1-10.</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 权限的种类10种 从0 - 9 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> out_false -2 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> out_true -1 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NO_LEVEL -1 </span></div><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; category;</div><div class="line"><span class="built_in">map</span>&lt; <span class="built_in">string</span>, <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; &gt; role;</div><div class="line"><span class="built_in">map</span>&lt; <span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; user;</div><div class="line"><span class="keyword">int</span> answer[<span class="number">10000</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> p,r,u,q;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;p;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</div><div class="line">		<span class="built_in">string</span> s,tmp;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s;</div><div class="line">		<span class="keyword">int</span> fen = s.find_first_of(<span class="string">':'</span>);</div><div class="line">		<span class="keyword">if</span>(fen == <span class="number">-1</span>)&#123;</div><div class="line">			category[s] = <span class="number">0</span>;</div><div class="line">		<span class="comment">//	cout&lt;&lt;s&lt;&lt;"|level:"&lt;&lt;category[s]&lt;&lt;endl;</span></div><div class="line">			<span class="keyword">continue</span>;	</div><div class="line">		&#125;</div><div class="line">		tmp = s.substr( <span class="number">0</span>, fen );</div><div class="line">		<span class="keyword">if</span>( s[fen+<span class="number">2</span>] == <span class="string">'\0'</span>)&#123;</div><div class="line">			category[tmp] = s[fen+<span class="number">1</span>]-<span class="string">'0'</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			category[tmp] = <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line"><span class="comment">//		cout&lt;&lt;tmp&lt;&lt;"|level:"&lt;&lt;category[tmp]&lt;&lt;endl;</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;r;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</div><div class="line">		<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; role_c;</div><div class="line">		<span class="built_in">string</span> role_s;</div><div class="line">		<span class="keyword">int</span> role_int;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;role_s;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;role_int;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;role_int;j++)&#123;</div><div class="line">			<span class="built_in">string</span> s,tmp;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;s;</div><div class="line">			</div><div class="line">			<span class="keyword">int</span> fen = s.find_first_of(<span class="string">':'</span>);</div><div class="line">			<span class="keyword">if</span>(fen == <span class="number">-1</span>)&#123;</div><div class="line">				role_c[s] = NO_LEVEL;</div><div class="line">			</div><div class="line">				<span class="keyword">continue</span>;	</div><div class="line">			&#125;</div><div class="line">			tmp = s.substr( <span class="number">0</span>, fen );</div><div class="line">			<span class="keyword">if</span>( s[fen+<span class="number">2</span>] == <span class="string">'\0'</span>)&#123;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span>(role_c.find(tmp) != role_c.end())&#123;</div><div class="line">					<span class="keyword">int</span> old = role_c[tmp];</div><div class="line">					role_c[tmp] = old &gt; s[fen+<span class="number">1</span>]-<span class="string">'0'</span> ? old: s[fen+<span class="number">1</span>]-<span class="string">'0'</span>;</div><div class="line">				&#125;<span class="keyword">else</span></div><div class="line">					role_c[tmp] = s[fen+<span class="number">1</span>]-<span class="string">'0'</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				role_c[tmp] = <span class="number">10</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		role[role_s] = role_c;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;u;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;u;i++)&#123;</div><div class="line">		<span class="built_in">string</span> user_s;</div><div class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; user_r;</div><div class="line">		<span class="keyword">int</span> user_n;</div><div class="line">		</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;user_s;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;user_n;</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;user_n;j++)&#123;</div><div class="line">			<span class="built_in">string</span> tmp;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</div><div class="line">			user_r.push_back(tmp);</div><div class="line">		&#125;</div><div class="line">		user[user_s] = user_r;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;q;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</div><div class="line">		<span class="built_in">string</span> s_user,cmd;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s_user&gt;&gt;cmd;</div><div class="line">		<span class="keyword">if</span>( user.find(s_user) != user.end() )&#123; <span class="comment">//存在 </span></div><div class="line">			<span class="keyword">int</span> fen = cmd.find_first_of(<span class="string">':'</span>);</div><div class="line">			<span class="keyword">if</span>( fen == <span class="number">-1</span> )&#123;  <span class="comment">//没有分号 、无等级查询  输出false、true 数字 </span></div><div class="line">				<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v_role = user[s_user];</div><div class="line">				<span class="comment">// 默认输出为false（当cmd命令是无等级的，且在role中未找到cmd命令） </span></div><div class="line">				<span class="keyword">int</span> level = out_false;		</div><div class="line">				<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it = v_role.begin();</div><div class="line">				<span class="keyword">while</span>(it != v_role.end())&#123;</div><div class="line">					<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; tmp = role[*it];</div><div class="line">					<span class="keyword">if</span>(tmp.find(cmd) != tmp.end())&#123; <span class="comment">// 存在cmd 命令 </span></div><div class="line">						<span class="keyword">if</span>(tmp[cmd] == NO_LEVEL)&#123;    <span class="comment">// cmd命令是无等级的，因而输出true </span></div><div class="line">							level = out_true;		<span class="comment">// 输出为true </span></div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						&#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp[cmd] &gt; level)&#123;</div><div class="line">							level = tmp[cmd];</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					it++;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				answer[i] = level;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;  <span class="comment">// 有分号 、带等级查询  f / t </span></div><div class="line">				<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v_role = user[s_user];</div><div class="line">				<span class="keyword">int</span> query_level;</div><div class="line">				<span class="keyword">if</span>(cmd[fen+<span class="number">2</span>] == <span class="string">'\0'</span>)&#123;</div><div class="line">					query_level= cmd[fen+<span class="number">1</span>] - <span class="string">'0'</span>;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					query_level= <span class="number">10</span>;</div><div class="line">				&#125;</div><div class="line">				cmd = cmd.substr(<span class="number">0</span>,fen);</div><div class="line">				answer[i] = out_false;  <span class="comment">// 默认输出false </span></div><div class="line">				<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it = v_role.begin();</div><div class="line">				<span class="keyword">while</span>(it != v_role.end())&#123;</div><div class="line">					<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; tmp = role[*it];</div><div class="line">					<span class="keyword">if</span>(tmp.find(cmd) != tmp.end())&#123;</div><div class="line">						<span class="keyword">if</span>(tmp[cmd] == NO_LEVEL)&#123;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						&#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp[cmd] &gt;= query_level)&#123;</div><div class="line">							answer[i] = out_true;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					it++;</div><div class="line">				&#125;</div><div class="line">			&#125;	</div><div class="line">		&#125;<span class="keyword">else</span>&#123;<span class="comment">//没有 user </span></div><div class="line">			answer[i] = out_false; <span class="comment">//输出false	</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(answer[i] == out_true)&#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"true"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(answer[i] == out_false)&#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"false"</span>&lt;&lt;<span class="built_in">endl</span>;	</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;answer[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是最近一次的csp题目，第三题就是典型的模拟题，并且这题还非常地大。。。俗称大模拟&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201612-4 csp dp</title>
    <link href="http://yoursite.com/2017/03/13/201612-4-csp-dp/"/>
    <id>http://yoursite.com/2017/03/13/201612-4-csp-dp/</id>
    <published>2017-03-13T10:02:23.000Z</published>
    <updated>2017-03-13T13:31:56.896Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目，当初考试时候也做过，一脸懵逼的瞎碰了10分。后来才知道可以用动态规划来写，找到了状态转移方程就十分简单。<br><a id="more"></a></p>
<h3 id="首先证明一下csp练习题的OJ给的算法耗时是假的"><a href="#首先证明一下csp练习题的OJ给的算法耗时是假的" class="headerlink" title="首先证明一下csp练习题的OJ给的算法耗时是假的"></a>首先证明一下csp练习题的OJ给的算法耗时是假的</h3><p><img src="http://liukun.tech/pic/time_csp.png" alt=""></p>
<p>我的O(n3)时间复杂度的代码，和O(n2)的时间对比，但是提交上去都是500ms左右，虽然这道题的限制用时是3s，依然没有超时，但感觉怪怪的。</p>
<p>另外也经常发现，两次提交同样的代码，跑的时间也不一样。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于题目中要求最终要按照字典序，因而只能每次合并相邻的两个频率，这就与矩阵链相乘十分相似。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 程序算法时间复杂度是 O(n3)的，而且数据量n = 1000，那么就是十亿数量级的</span></div><div class="line"><span class="comment">// 本以为的会超时，但是居然没有！ </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="keyword">struct</span> Node&#123;</div><div class="line">	<span class="keyword">int</span> cost;</div><div class="line">	<span class="keyword">int</span> base;</div><div class="line">&#125;;</div><div class="line">Node dp[<span class="number">1000</span>][<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n, t;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">	<span class="keyword">while</span>(n--)&#123;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">		data.push_back(t);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> len = data.size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">		dp[i][i].base = <span class="number">0</span>;</div><div class="line">		dp[i][i].cost = data[i];</div><div class="line">		<span class="comment">// 第i列 从下向上填充 j不断减少 </span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">			<span class="comment">//求出 dp[j][i]的最优解 </span></div><div class="line">			<span class="keyword">int</span> min_cost = INF, base=<span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k+j&lt;i; k++)&#123;</div><div class="line">				<span class="keyword">int</span> cost = dp[j][j+k].cost + dp[j+k+<span class="number">1</span>][i].cost + dp[j][j+k].base + dp[j+k+<span class="number">1</span>][i].base;</div><div class="line">				min_cost = min(cost,min_cost) ;</div><div class="line">				base += data[k+j];</div><div class="line">			&#125;</div><div class="line">			dp[j][i].cost = min_cost;</div><div class="line">			dp[j][i].base = base + data[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][len<span class="number">-1</span>].cost&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目，当初考试时候也做过，一脸懵逼的瞎碰了10分。后来才知道可以用动态规划来写，找到了状态转移方程就十分简单。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201412-4 csp 最小生成树</title>
    <link href="http://yoursite.com/2017/03/13/201412-4-csp-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://yoursite.com/2017/03/13/201412-4-csp-最小生成树/</id>
    <published>2017-03-13T09:56:48.000Z</published>
    <updated>2017-03-14T10:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>毫无坑点，直接用Kruskal 算法即可。算法思想也比较简单，直接参见代码即可<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最小生成树  Kruskal 算法</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 100000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxE 100000</span></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">	<span class="keyword">int</span> fm, to ,dist;</div><div class="line">&#125;e[maxE];</div><div class="line"><span class="keyword">int</span> fa[maxV], n, m;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.dist &lt; b.dist;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;  <span class="comment">//在并查集森林中找到x的祖先 </span></div><div class="line">	<span class="keyword">if</span>(fa[x] == x) <span class="keyword">return</span> fa[x];</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> fa[x] = getfa(fa[x]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> getfa(x) == getfa(y);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> fax = getfa(x), fay = getfa(y);</div><div class="line">	fa[fax] = fay;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;e[i].fm&gt;&gt;e[i].to&gt;&gt;e[i].dist;</div><div class="line">	sort(e+<span class="number">1</span>,e+m+<span class="number">1</span>,cmp); <span class="comment">// 对边按权值进行升序排序</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		fa[i] = i;</div><div class="line">	<span class="keyword">int</span> rst = n, ans = <span class="number">0</span>; <span class="comment">//rst 表示目前的点共存于多少个集合中</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m &amp;&amp; rst&gt;<span class="number">1</span>; i++)&#123;</div><div class="line">		<span class="keyword">int</span> x = e[i].fm, y = e[i].to;</div><div class="line">		<span class="keyword">if</span>(same(x,y)) <span class="keyword">continue</span>;  <span class="comment">//如果两个点存在同一集合中</span></div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			merge(x,y); <span class="comment">//将两个点合并到同一集 </span></div><div class="line">			rst--; <span class="comment">//合并集合后，集合数目减一 </span></div><div class="line">			ans += e[i].dist;</div><div class="line">		&#125;	</div><div class="line">	&#125; </div><div class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毫无坑点，直接用Kruskal 算法即可。算法思想也比较简单，直接参见代码即可&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201312-4 csp 有趣的数</title>
    <link href="http://yoursite.com/2017/03/13/201312-4-csp-%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0/"/>
    <id>http://yoursite.com/2017/03/13/201312-4-csp-有趣的数/</id>
    <published>2017-03-13T08:35:50.000Z</published>
    <updated>2017-03-13T08:49:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>这题是一个排列组合问题，只要建模完成就很容易写出来。<br><a id="more"></a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　我们把一个数称为有趣的，当且仅当：</p>
<ol>
<li>它的数字只包含0, 1, 2, 3，且这四个数字都出现过至少一次。</li>
<li>所有的0都出现在所有的1之前，而所有的2都出现在所有的3之前。</li>
<li>最高位数字不为0。
　　</li>
</ol>
<p>因此，符合我们定义的最小的有趣的数是2013。除此以外，4位的有趣的数还有两个：2031和2301。
　　</p>
<p>请计算恰好有n位的有趣的数的个数。由于答案可能非常大，只需要输出答案除以1000000007的余数。</p>
<p>输入格式
　　</p>
<p>输入只有一行，包括恰好一个正整数n (4 ≤ n ≤ 1000)。</p>
<p>输出格式
　　</p>
<p>输出只有一行，包括恰好n 位的整数中有趣的数的个数除以1000000007的余数。</p>
<p>样例输入</p>
<p>4</p>
<p>样例输出</p>
<p>3</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先我们假设数字0的个数为a，1的个数为b，同时依据题目限制条件则有：a+b &lt;= n-2(因为2、3必须出现至少一次)。那么对于a个0和b个1组成的有趣的数有多少个呢？</p>
<ol>
<li>首先从n-1个（因为总共n位数，且第一位必为2，可以思考一下为什么）位置中取出a+b个位置用来放置0、1，有C[n-1][a+b]中情况；</li>
<li>这时，0、1的位置也就已经确定了，思考一下为什么。那就开始考虑一下2、3的位置，首先知道2、3的总数目为 n-a-b-1 ，而2又必须在3之前，那么我们只要找到第一个出现3的位置即可，很简单必然是 n-a-b-2种情况。</li>
</ol>
<p>这样我们就可以得到对于a个0和b个1组成的有趣的数有 C[n-1][a+b]*(n-a-b-1) 个。最后我们只要遍取一下所有可能的a和b即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1001 </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1000000007</span>;</div><div class="line"><span class="keyword">int</span> c[maxn][maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">init</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p; i++)&#123;</div><div class="line">		c[i][<span class="number">0</span>] = c[i][i] = <span class="number">1</span>;</div><div class="line">		c[i][<span class="number">1</span>] = c[i][i<span class="number">-1</span>] = i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>; <span class="number">2</span>*j&lt;=i; j++)&#123;</div><div class="line">			c[i][j] = (c[i<span class="number">-1</span>][j<span class="number">-1</span>] + c[i<span class="number">-1</span>][j])%mod;</div><div class="line">			c[i][i-j] = c[i][j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">	init(n<span class="number">-1</span>);</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>; a&lt;=n<span class="number">-3</span>; a++)&#123;</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">int</span> b=<span class="number">1</span>; b+a&lt;=n<span class="number">-2</span>; b++)&#123;</div><div class="line">			<span class="keyword">long</span> <span class="keyword">long</span> tmp1 = c[n<span class="number">-1</span>][a+b], tmp2;</div><div class="line">			tmp2 = n-a-b<span class="number">-1</span>;</div><div class="line">			tmp1 = ( tmp1*tmp2 )% mod;</div><div class="line">			res += tmp1;</div><div class="line">			res %= mod;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这题是一个排列组合问题，只要建模完成就很容易写出来。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201509-4 csp Tarjan</title>
    <link href="http://yoursite.com/2017/03/13/201509-4%20csp%20Tarjan/"/>
    <id>http://yoursite.com/2017/03/13/201509-4 csp Tarjan/</id>
    <published>2017-03-13T06:28:52.000Z</published>
    <updated>2017-03-13T13:10:21.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tarjan-算法"><a href="#Tarjan-算法" class="headerlink" title="Tarjan 算法"></a>Tarjan 算法</h2><p>任选一结点开始进行深度优先搜索（若深度优先搜索结束后仍有未访问的结点，则再从中任选一点再次进行）。搜索过程中已访问的结点不再访问。搜索树的若干子树构成了图的强连通分量。</p>
<p>结点按照被访问的顺序存入栈中。从搜索树的子树返回至一个结点时，检查该结点是否是某一强连通分量的根结点（见下）并将其从栈中删除。如果某结点是强连通分量的根，则在它之前出栈且还不属于其他强连通分量的结点构成了该结点所在的强连通分量。<br><a id="more"></a><br><img src="http://liukun.tech/pic/targan.gif" alt=""></p>
<h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><p>定义 DFN(u) 为节点 u 搜索的次序编号(时间戳)，Low(u) 为 u 或 u 的子树能够追溯到的最早的栈中节点的次序号。由定义可以得出，<br><img src="http://liukun.tech/pic/targan.png" alt=""></p>
<ol>
<li>遍历一个点，得到时间戳 DFN[i]，并计算由该点可追溯到的最老时间戳 LOW[i]。</li>
<li>枚举该点的所有边，若 DFN[j]=0，DFN[j]=0 表明未被搜索过，递归搜索之。</li>
<li>若 DFN[j] 不为 0，则 j 被搜索过，判断 j 是否在栈中，且 j 的时间戳 DFN[j] 小于当前时间戳 DFN[i]，可判定成环。将 LOW[i] 更新成 DFN[j]。</li>
<li>若这个点 LOW[i] 和 DFN[i] 相等，说明这个节点是所有强连通分量的元素中在栈中最早的节点，将该强连通分量全部弹出。</li>
</ol>
<p>时间复杂度是 O( ∣V∣ + ∣E∣ )。</p>
<h2 id="应用-201509-4-csp"><a href="#应用-201509-4-csp" class="headerlink" title="应用 201509-4 csp"></a>应用 201509-4 csp</h2><p>使用targan算法 毫无坑点</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最大连通分支 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001</span></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">	<span class="keyword">int</span> from,to;</div><div class="line">	Edge(<span class="keyword">int</span> x,<span class="keyword">int</span> y):from(x),to(y)&#123;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; edges;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> dfn[maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> low[maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> BcntEach[maxn];</div><div class="line"><span class="keyword">bool</span> inStack[maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> Dindex;</div><div class="line"><span class="keyword">int</span> N,M;</div><div class="line"><span class="keyword">int</span> Bcnt = <span class="number">0</span>;  <span class="comment">// 强联通分支个数</span></div><div class="line"><span class="keyword">int</span> Stap[maxn] ; <span class="comment">//模拟栈</span></div><div class="line"><span class="keyword">int</span> stop;  <span class="comment">//栈的元素个数,即栈顶元素位置 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">	edges.push_back(Edge(from,to));</div><div class="line">	G[from].push_back(edges.size()<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">targan</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> j;</div><div class="line">	dfn[i] = low[i] = ++Dindex;</div><div class="line">	inStack[i] = <span class="literal">true</span>;</div><div class="line">	Stap[++stop] = i;</div><div class="line">	<span class="keyword">int</span> len = G[i].size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;len; k++)&#123;</div><div class="line">		j = edges[ G[i][k] ].to;</div><div class="line">		<span class="keyword">if</span>( !dfn[j] )&#123;</div><div class="line">			targan(j);</div><div class="line">			low[i] = min(low[i],low[j]);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( inStack[j] &amp;&amp; dfn[j]&lt;low[i] )&#123;</div><div class="line">			low[i] = dfn[j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( dfn[i] == low[i] )&#123;</div><div class="line">		Bcnt++;</div><div class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">		<span class="keyword">do</span>&#123;</div><div class="line">			j = Stap[stop--];</div><div class="line">			inStack[j] = <span class="literal">false</span>;</div><div class="line">			cnt++;</div><div class="line">		&#125;<span class="keyword">while</span>(j!=i);</div><div class="line">		BcntEach[Bcnt] = cnt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	stop = Bcnt = Dindex = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)&#123;</div><div class="line">		<span class="keyword">if</span>( !dfn[i] )</div><div class="line">			targan(i);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</div><div class="line">	<span class="keyword">while</span>(M--)&#123;</div><div class="line">		<span class="keyword">int</span> a,b;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">		addEdge(a,b);</div><div class="line">	&#125;</div><div class="line">	solve();</div><div class="line">	<span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Bcnt;i++)&#123;</div><div class="line">		<span class="keyword">int</span> x = BcntEach[i];</div><div class="line">		res += (x<span class="number">-1</span>)*x/<span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tarjan-算法&quot;&gt;&lt;a href=&quot;#Tarjan-算法&quot; class=&quot;headerlink&quot; title=&quot;Tarjan 算法&quot;&gt;&lt;/a&gt;Tarjan 算法&lt;/h2&gt;&lt;p&gt;任选一结点开始进行深度优先搜索（若深度优先搜索结束后仍有未访问的结点，则再从中任选一点再次进行）。搜索过程中已访问的结点不再访问。搜索树的若干子树构成了图的强连通分量。&lt;/p&gt;
&lt;p&gt;结点按照被访问的顺序存入栈中。从搜索树的子树返回至一个结点时，检查该结点是否是某一强连通分量的根结点（见下）并将其从栈中删除。如果某结点是强连通分量的根，则在它之前出栈且还不属于其他强连通分量的结点构成了该结点所在的强连通分量。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201403-3 csp 命令行选项</title>
    <link href="http://yoursite.com/2017/03/01/201403-3%20csp%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9/"/>
    <id>http://yoursite.com/2017/03/01/201403-3 csp 命令行选项/</id>
    <published>2017-03-01T14:59:39.000Z</published>
    <updated>2017-03-14T11:10:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>在同学的帮助下，终于解决了,这个简单的题目总算拿了100分。<br><a id="more"></a><br>-3.01</p>
<pre><code>先就只放代码吧，后面解决了再补充吧。 (ง •_•)ง  
</code></pre><p>-3.05</p>
<pre><code>终于解决了！

后来的90分，则是在机智的同学帮助下，发现了两个问题： 
</code></pre><ol>
<li>“ls” 命令中可能存在 ‘-‘；    </li>
<li>两个选项之间也可能有多个空格 ；</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 100了  1. ls中存在 '-'  2. 两个选项之间可能有多个空格 3.要分析题目中隐含的各种可能 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">int</span> p[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 1: 无参数 ，2 带参数， 0 未用上 </span></div><div class="line"><span class="built_in">string</span> para[<span class="number">20</span>][<span class="number">26</span>];</div><div class="line"><span class="keyword">int</span> cmd[<span class="number">20</span>][<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 1: 无参数 ，2 带参数， 0 未用上 </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> n,len=<span class="number">0</span>;</div><div class="line">	<span class="built_in">string</span> s;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;s;</div><div class="line">	len = s.size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">		p[s[i]-<span class="string">'a'</span>]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(s[i+<span class="number">1</span>]==<span class="string">':'</span>)&#123;</div><div class="line">			p[s[i]-<span class="string">'a'</span>]++;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">	<span class="built_in">cin</span>.ignore(); <span class="comment">//去除非有效字符 </span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">		s.clear();</div><div class="line">		getline(<span class="built_in">cin</span>,s);</div><div class="line">		len = s.size();</div><div class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="comment">//找到第一个空格的位置，也就是忽略 ls ，同时 ls中可能包含 '-' </span></div><div class="line">		<span class="keyword">while</span>(s[j] != <span class="string">' '</span>) j++;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(;j&lt;len;j++)&#123;</div><div class="line">			<span class="keyword">if</span>(s[j] == <span class="string">'-'</span>)&#123;</div><div class="line">				j++;</div><div class="line">				<span class="keyword">if</span>(p[ s[j]-<span class="string">'a'</span> ] == <span class="number">1</span>)&#123;  <span class="comment">// 不带参数</span></div><div class="line">					cmd[i][ s[j]-<span class="string">'a'</span> ] = <span class="number">1</span>;</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(p[ s[j]-<span class="string">'a'</span> ] == <span class="number">2</span>)&#123;  <span class="comment">// 带参数</span></div><div class="line">					cmd[i][ s[j]-<span class="string">'a'</span> ] = <span class="number">2</span>;</div><div class="line">					<span class="keyword">int</span> f = s[j]-<span class="string">'a'</span>;</div><div class="line">					<span class="keyword">while</span>(s[++j]==<span class="string">' '</span>);</div><div class="line">					<span class="keyword">int</span> tmp = j;</div><div class="line">					<span class="comment">// 2017-3-2中午发现这里还要判断tmp是否超出len范围（当参数位于字符串最后时）</span></div><div class="line">					<span class="keyword">while</span>(s[j]!=<span class="string">' '</span>&amp;&amp; j &lt; len)</div><div class="line">					&#123;</div><div class="line">						j++;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">// 如果带参数选项后面没有带参数，则错误 *************</span></div><div class="line">					<span class="keyword">if</span>( j == tmp) <span class="keyword">break</span>;</div><div class="line">					para[i][ f ] = s.substr(tmp,j-tmp);</div><div class="line">					<span class="comment">// 2017-3-2早上发现这里substr的第二个参数应该是所截取字符串的长度，开始以为是终止位置</span></div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[j] != <span class="string">' '</span>)&#123; </div><div class="line">			<span class="comment">//  1、遇到不是空格 就肯定是不合要求的因而跳出，不处理后面的 </span></div><div class="line">			<span class="comment">//  2、这里还处理了 多次出现空格的情况 </span></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">":"</span>; </div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</div><div class="line">			<span class="keyword">char</span> t = j+<span class="string">'a'</span>;</div><div class="line">			<span class="keyword">if</span>(cmd[i][j] == <span class="number">1</span>)&#123;</div><div class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="string">"-"</span> &lt;&lt; t;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmd[i][j] == <span class="number">2</span>)&#123;</div><div class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="string">"-"</span> &lt;&lt; t &lt;&lt; <span class="string">" "</span>&lt;&lt; para[i][j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在同学的帮助下，终于解决了,这个简单的题目总算拿了100分。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>Android 架构初探</title>
    <link href="http://yoursite.com/2017/02/26/Android-%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2017/02/26/Android-架构初探/</id>
    <published>2017-02-26T14:23:42.000Z</published>
    <updated>2017-03-13T13:10:42.755Z</updated>
    
    <content type="html"><![CDATA[<p>将项目分为了三个层级：模型层、核心层、界面层。模型层定义了所有的模型，即数据类型如UserBO；核心层处理所有业务逻辑，如判断邮箱格式、密码的md5转换；界面层就处理界面的展示。各个层级之间的依赖关系如下图</p>
<p><img src="http://liukun.tech/pic/android-jiagou-01.png" alt=""><br><a id="more"></a></p>
<h2 id="模型层"><a href="#模型层" class="headerlink" title="模型层"></a>模型层</h2><p>由上图，我们知道了模型层是被其他两层所依赖的，也就是说模型层定义的数据类型可以被其他两层引用。（这也很容易理解，因为数据实体类必然是最基础的，需要被引用而不是引用别人）</p>
<p>模型层虽然横跨所有层级，但确实最为简单易懂的。只不过是封装了所有数据实体类，基本上也是跟后端数据库的数据一致的。</p>
<h2 id="核心层"><a href="#核心层" class="headerlink" title="核心层"></a>核心层</h2><p>核心层依赖于模型层，也就是说核心层可以引用模型层的定义各种数据实体类。</p>
<p>本层中定义了两个接口，三个类（如还有需要可再定义），下面我们一一解释。</p>
<ul>
<li><p>接口 ActionCallbackListener<t></t></p>
<p>  我们看名字就知道它是一个回调监听器，并且后面带有一个泛型T，也可以让我们依据实际情况返回不同的数据。</p>
</li>
<li><p>接口 AppAction</p>
<p>  其中定义的是界面层需要使用的action，例如login、register。</p>
</li>
<li><p>类 AppActionImpl implements AppAction</p>
<p>  我们看到它继承了AppAction，也就是说 <strong>它将会实现AppAction中定义的虚函数</strong>。</p>
</li>
<li><p>类 ErrorEvent </p>
<p>  顾名思义，也就是完成错误码的一些相关定义。</p>
</li>
<li><p>类 EncryptUtil</p>
<p>  加密工具类，如完成md5转换。</p>
</li>
</ul>
<h2 id="界面层"><a href="#界面层" class="headerlink" title="界面层"></a>界面层</h2><p>界面层依赖于核心层和模型层。之所以依赖核心层，就是因为它把业务逻辑的相关操作都放到核心层了。</p>
<p>我们都知道界面层最复杂,也最容易变得混乱不堪，因而我们采用如下方法改善这一问题：</p>
<ul>
<li><p>根据不同类型划分包，分别为activity（各个活动类）、adapter、utils（工具类）、view（自定义界面）、fragment等。</p>
</li>
<li><p>对于activity、adapter、fragment，各自都有一个基类，做统一的处理，比如定义了一些共用的常量、对象和方法等。</p>
</li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>为了改变之前写项目的混乱，逛了逛github和知乎，就看到了Keegan小钢的<a href="http://keeganlee.me/post/android/20150605" target="_blank" rel="external">这篇博客</a>，感触最为深刻，因而也想下手敲敲代码，试一试。</p>
<p>感谢Keegan小钢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将项目分为了三个层级：模型层、核心层、界面层。模型层定义了所有的模型，即数据类型如UserBO；核心层处理所有业务逻辑，如判断邮箱格式、密码的md5转换；界面层就处理界面的展示。各个层级之间的依赖关系如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://liukun.tech/pic/android-jiagou-01.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="Android 架构" scheme="http://yoursite.com/tags/Android-%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1-RomanToInt</title>
    <link href="http://yoursite.com/2017/02/25/leetcode-1-RomanToInt/"/>
    <id>http://yoursite.com/2017/02/25/leetcode-1-RomanToInt/</id>
    <published>2017-02-25T08:13:06.000Z</published>
    <updated>2017-03-13T13:10:50.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<p><a href="https://leetcode.com/problems/roman-to-integer/?tab=Description" target="_blank" rel="external">原题链接</a><br><a id="more"></a></p>
<h2 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h2><ul>
<li><p>第一感觉的歧途</p>
<p>  第一眼看到这道题，就想到了2016-12的csp第二道工资计算题，觉得似乎正着算比较麻烦（即通过罗马数字直接得到阿拉伯数字，因为考虑到罗马数字中有很多不同字母），而如果反过来通过阿拉伯数字得到罗马数字就非常简单。</p>
<p>  例如，对于阿拉伯数字 1999，只要分别得到千位、百位、十位、个位数字，再分别转换为罗马数字，最后拼接起来即可。</p>
<p>  于是乎，抱着 “正难则反” 的策略，我兴致勃勃地写了一个for循环，从1-3999遍历得到罗马数字，其中只要得到一个与输入罗马数字相同的字符串就停下来，也就得到了它的阿拉伯数字。</p>
<p>  但是！！！</p>
<p>  <img src="http://liukun.tech/pic/leetcode-1-TimeOut.png" alt=""></p>
<p>  一脸懵逼。我这么思路清晰、优美的代码居然超时了。</p>
<p>  <img src="http://liukun.tech/pic/leetcode-1-TimeOut_code.png" alt=""></p>
<p>  不过没关系，容我分析一波。既然它说我的代码超时了，又不告诉我时间用了多少就算超了，那我只好在自己电脑跑一下并输出用时。</p>
<p>  <img src="http://liukun.tech/pic/leetcode-1-TimeOut_myC.png" alt=""></p>
<p>  一看吓一跳，居然用时0ms，一开始我都是不信的，然后又跑了好几次，还换了计时的方法，最后发现结果都是0ms（只有一次是1ms）。后来还了解到clock()方式计时精确度一般在10ms左右，然后这里我测的时间都是0ms，显然不妥，于是，再找了一种更精确的计时方式，得到如下</p>
<p>  <img src="http://liukun.tech/pic/leetcode-1-CaculTime.png" alt=""></p>
<p>  这样看来用时并不多，那结论就是leetcode的OJ给跑测试用例的cpu不咋样，甚至不如我的电脑。。。虽然这个结论是我始料未及的，但是事实摆在这里</p>
</li>
</ul>
<blockquote>
<p>   (补)<strong>但是后来我发现，原来leetcode的用时计算的是所有用例的用时</strong>，不过通过与后来通过算法用时的对比，还是可以发现，仅一个用例也相差了0.332009-0.00669372ms，而leetcode使用了近4000个用例，也就是说正着算使用了大概1.2s，而反着只要27ms左右。原来超时就在这里。</p>
</blockquote>
<p><img src="http://liukun.tech/pic/embarrassed.gif" alt=""></p>
<ul>
<li><p>那就正面解决吧</p>
<p>  既然不能用每个阿拉伯数字都试一试，那就直接对输入的罗马数字进行处理吧。</p>
<p>  分析一下，发现千位只会出现 M ，百位只会出现 C、D、M ，类似地分析出十位、个位，那就依次找到罗马数字中的各个数位，再进行转换即可咯。（这时候发现，正面处理也是一点都不难。。。怪不得这是一道easy的题目， 0 0 ）</p>
<p>  三下五除二，就写出了如下代码，然后就AC了，很开心。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">   <span class="keyword">char</span>* p[<span class="number">4</span>][<span class="number">10</span>] = &#123;</div><div class="line">       &#123; <span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span> &#125;,</div><div class="line">       &#123; <span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span> &#125;,</div><div class="line">       &#123; <span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span> &#125;,</div><div class="line">       &#123; <span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;</div><div class="line">   &#125;;</div><div class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span>(s[i] == <span class="string">'M'</span>)&#123; <span class="comment">// thousand</span></div><div class="line">       i++;</div><div class="line">       ret += <span class="number">1000</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> j = i;  <span class="comment">// hundred</span></div><div class="line"><span class="keyword">while</span>(s[j] == <span class="string">'C'</span> || s[j] == <span class="string">'D'</span> || s[j] == <span class="string">'M'</span>)&#123;</div><div class="line">	j++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">string</span> tmp;</div><div class="line"><span class="keyword">if</span>( j != i)&#123;</div><div class="line">    tmp = s.substr(i,j-i);</div><div class="line">    i = j;</div><div class="line">   	j = <span class="number">1</span>;</div><div class="line">   	<span class="keyword">while</span>(tmp != p[<span class="number">2</span>][j])&#123;</div><div class="line">		j++;</div><div class="line">   	&#125;;</div><div class="line">	<span class="keyword">if</span>(j!=<span class="number">10</span>)</div><div class="line">  			ret = ret + j*<span class="number">100</span>;</div><div class="line">   	j = i;   </div><div class="line">&#125;</div><div class="line">	        <span class="comment">// ten-s</span></div><div class="line"><span class="keyword">while</span>(s[j] == <span class="string">'X'</span> || s[j] == <span class="string">'L'</span> || s[j] == <span class="string">'C'</span>)&#123;</div><div class="line">	j++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(j != i)&#123;</div><div class="line">    tmp = s.substr(i,j-i);</div><div class="line">   	i = j;</div><div class="line">   	j = <span class="number">1</span>;</div><div class="line">   	<span class="keyword">while</span>(tmp != p[<span class="number">1</span>][j])&#123;</div><div class="line">   		j++;</div><div class="line">   	&#125;;</div><div class="line">   	<span class="keyword">if</span>(j!=<span class="number">10</span>)</div><div class="line">   		ret = ret + j*<span class="number">10</span>;</div><div class="line">   	j = i;   </div><div class="line">&#125;	</div><div class="line">               <span class="comment">// last-digit</span></div><div class="line"><span class="keyword">while</span>(s[j] == <span class="string">'I'</span> || s[j] == <span class="string">'V'</span> || s[j] == <span class="string">'X'</span>)&#123;</div><div class="line">	j++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(j != i)&#123;</div><div class="line">    tmp = s.substr(i,j-i);</div><div class="line">   	i = j;</div><div class="line">   	j = <span class="number">1</span>;</div><div class="line">   	<span class="keyword">while</span>(tmp != p[<span class="number">0</span>][j])&#123;</div><div class="line">   		j++;</div><div class="line">   	&#125;;</div><div class="line">   	<span class="keyword">if</span>(j!=<span class="number">10</span>)</div><div class="line">   		ret = ret + j;    </div><div class="line">&#125;</div><div class="line">	</div><div class="line">   <span class="keyword">return</span> ret;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后我又把这个代码在自己电脑跑了一下，计算用时仅0.00669372ms（这个计时其实也有1ms左右的误差，但这么多不精确小数哪里来的我也不知道，觉得下次要专门研究一下计时函数），确实是比刚才第一种方法快了很多。</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p> stay hungry, stay foolish</p>
</blockquote>
<p>伟大如乔布斯也明白向他人学习的重要性，何况于我呢！</p>
<p>于是乎，我又孜孜不倦地去看了一看别人写的代码。</p>
<h3 id="the-first"><a href="#the-first" class="headerlink" title="the first"></a>the first</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//count every Symbol and add its value to the sum, and </span></div><div class="line"><span class="comment">//minus the extra part of special cases.</span></div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"IV"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">2</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"IX"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">2</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"XL"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">20</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"XC"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">20</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"CD"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">200</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"CM"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">200</span>;&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> c[]=s.toCharArray();</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(;count&lt;=s.length()<span class="number">-1</span>;count++)&#123;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'M'</span>) sum+=<span class="number">1000</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'D'</span>) sum+=<span class="number">500</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'C'</span>) sum+=<span class="number">100</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'L'</span>) sum+=<span class="number">50</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'X'</span>) sum+=<span class="number">10</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'V'</span>) sum+=<span class="number">5</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'I'</span>) sum+=<span class="number">1</span>;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div></pre></td></tr></table></figure>
<p>嗯。。。</p>
<p>这代码简单、明了、易懂，即使愚钝如我，也在看完之后立刻明白了它的原理，精确的抓住了罗马数字的特性！</p>
<p>对于I、V、X、L、C、D、M这些构成罗马数字的符号，每个符号都是代表了一个数值，并且对于VI、LX等，完全可以分别把每个单独的符号所代表的数值加起来；唯一例外的是 IV、IX、XL、XC、CD、CM这几个，因为他们小数值的符号出现在前面，而大数值的符号出现在后面，这样就不是单独加起来能够正确表达了，所以对于这些特例，只需要在前面就处理一下即可。</p>
<h3 id="The-second"><a href="#The-second" class="headerlink" title="The second"></a>The second</h3><p>而这第二个解法则是更加简单了，可是易读性却。。。。</p>
<p>不过，我略加思索，便明白了。嘿嘿(●ˇ∀ˇ●)</p>
<p>其实，就是把上一个解法加工了一下罢了，正是这句我刚说过的话启发了我：IV、IX、XL、XC、CD、CM这几个，因为他们小数值的符号出现在前面，而大数值的符号出现在后面，这样就不是单独加起来能够正确表达了。</p>
<p>在这个解法中，<strong>依据前一个符号与后一个符号表示数值的大小关系</strong>，来得到他们联合在一起表示的正确的值是多少。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Problem is simpler to solve by working the string from</span></div><div class="line"><span class="comment">//back to front and using a map. Runtime speed is 88 ms.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; T = &#123; &#123; <span class="string">'I'</span> , <span class="number">1</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'V'</span> , <span class="number">5</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'X'</span> , <span class="number">10</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'L'</span> , <span class="number">50</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'C'</span> , <span class="number">100</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'D'</span> , <span class="number">500</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'M'</span> , <span class="number">1000</span> &#125; &#125;;</div><div class="line">                                   </div><div class="line">   <span class="keyword">int</span> sum = T[s.back()];</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) </div><div class="line">   &#123;</div><div class="line">       <span class="keyword">if</span> (T[s[i]] &lt; T[s[i + <span class="number">1</span>]])</div><div class="line">       &#123;</div><div class="line">           sum -= T[s[i]];</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span></div><div class="line">       &#123;</div><div class="line">           sum += T[s[i]];</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>思维要开阔，要多想想数据的特点，才能得到解题的关键点；</li>
<li>C++的定时函数需要研究一下；</li>
<li>我现在使用的还只是笨方法，继续加油吧 (ง •_•)ง</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Given a roman numeral, convert it to an integer.&lt;/p&gt;
&lt;p&gt;Input is guaranteed to be within the range from 1 to 3999.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/roman-to-integer/?tab=Description&quot;&gt;原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>AsyncTask使用简介</title>
    <link href="http://yoursite.com/2017/02/20/AsyncTask/"/>
    <id>http://yoursite.com/2017/02/20/AsyncTask/</id>
    <published>2017-02-20T13:45:58.000Z</published>
    <updated>2017-02-23T07:17:13.896Z</updated>
    
    <content type="html"><![CDATA[<p>AsyncTask是Android提供的一个助手类，它对Thread和Handler进行了封装，方便我们使用。Android之所以提供AsyncTask这个类，就是为了方便我们在后台线程中执行耗时操作，然后将结果发送给主线程，从而在主线程中进行UI更新等操作。<br><a id="more"></a></p>
<h1 id="三个构造时的传入参数"><a href="#三个构造时的传入参数" class="headerlink" title="三个构造时的传入参数"></a>三个构造时的传入参数</h1><p>首先，AsyncTask构造时有三种泛型参数：Params, Progress 和 Result，如下</p>
<p><code>new AsyncTask&lt;Params, Progress, Result&gt; () {
}</code></p>
<ul>
<li>Params 表示用于AsyncTask执行任务的参数的类型</li>
<li>Progress 表示在后台线程处理的过程中，可以阶段性地发布结果的数据类型</li>
<li>Result 表示任务全部完成后所返回的数据类型</li>
</ul>
<h1 id="四个重要的回调方法"><a href="#四个重要的回调方法" class="headerlink" title="四个重要的回调方法"></a>四个重要的回调方法</h1><ul>
<li><h2 id="onPreExecute"><a href="#onPreExecute" class="headerlink" title="onPreExecute"></a>onPreExecute</h2><p>  <code>@MainThread</code></p>
<p>  <code>protect void onPreExecution () { }</code></p>
<p>  该方法有MainThread注解，表示该方法是运行在主线程中的。在AsyncTask执行了execute()方法后就会在UI线程上执行onPreExecute()方法，该方法在task真正执行前运行，我们通常可以在该方法中显示一个进度条，从而告知用户后台任务即将开始。</p>
</li>
<li><h2 id="doInBackground"><a href="#doInBackground" class="headerlink" title="doInBackground"></a>doInBackground</h2><p>  <code>@WorkThread</code></p>
<p>  <code>protect abstract Result doInBackground (Params... params) { }</code></p>
<p>  该方法有WorkerThread注解，表示该方法是运行在单独的工作线程中的，而不是运行在主线程中。doInBackground会在onPreExecute()方法执行完成后立即执行，该方法用于在工作线程中执行耗时任务，我们可以在该方法中编写我们需要在后台线程中运行的逻辑代码，由于是运行在工作线程中，所以该方法不会阻塞UI线程。该方法接收Params泛型参数，参数params是Params类型的不定长数组，该方法的返回值是Result泛型，由于doInBackgroud是抽象方法，我们在使用AsyncTask时必须重写该方法。在doInBackground中执行的任务可能要分解为好多步骤，每完成一步我们就可以通过调用AsyncTask的publishProgress(Progress…)将阶段性的处理结果发布出去，阶段性处理结果是Progress泛型类型。当调用了publishProgress方法后，处理结果会被传递到UI线程中，并在UI线程中回调onProgressUpdate方法，下面会详细介绍。根据我们的具体需要，我们可以在doInBackground中不调用publishProgress方法，当然也可以在该方法中多次调用publishProgress方法。doInBackgroud方法的返回值表示后台线程完成任务之后的结果。</p>
</li>
<li><h2 id="onProgressUpdate"><a href="#onProgressUpdate" class="headerlink" title="onProgressUpdate"></a>onProgressUpdate</h2><p>  <code>@MainThread</code></p>
<p>  <code>protect void onProgressUpdate (Progress... values) { }</code></p>
<p>  该方法也具有MainThread注解，表示该方法是在主线程上被调用的，且传入的参数是Progress泛型定义的不定长数组。如果在doInBackground中多次调用了publishProgress方法，那么主线程就会多次回调onProgressUpdate方法。  </p>
</li>
<li><h2 id="onPostExecute"><a href="#onPostExecute" class="headerlink" title="onPostExecute"></a>onPostExecute</h2><p>  <code>@MainThread</code></p>
<p>  <code>protect void onPostExecute (Result result) { }</code></p>
<p>  该方法也具有MainThread注解，表示该方法是在主线程中被调用的。当doInBackgroud方法执行完毕后，就表示任务完成了，doInBackgroud方法的返回值就会作为参数在主线程中传入到onPostExecute方法中，这样就可以在主线程中根据任务的执行结果更新UI。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AsyncTask是Android提供的一个助手类，它对Thread和Handler进行了封装，方便我们使用。Android之所以提供AsyncTask这个类，就是为了方便我们在后台线程中执行耗时操作，然后将结果发送给主线程，从而在主线程中进行UI更新等操作。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>First page</title>
    <link href="http://yoursite.com/2017/02/07/First-page/"/>
    <id>http://yoursite.com/2017/02/07/First-page/</id>
    <published>2017-02-07T09:56:35.000Z</published>
    <updated>2017-02-23T06:29:46.341Z</updated>
    
    <content type="html"><![CDATA[<p>  十分开心，终于搭建好了第一个blog。<br><a id="more"></a></p>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><ul>
<li><p>Markdown</p>
<p>由于博客的文章都是采用markdown来写的，所以有必要了解这个语法。</p>
<p>Markdown 的目标是实现「易读易写」。<a href="http://www.jianshu.com/p/f3fd881548ad" target="_blank" rel="external">这里</a>不仅介绍了atom的使用方法，还有Markdown的语法，我这第一篇文章便是用atom写的，虽然我最后还是准备投入Vscode的怀抱。</p>
</li>
<li><p>theme——<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">Maupassant</a></p>
<p>这是一个至简的主题，所以我喜欢，于是用了。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  十分开心，终于搭建好了第一个blog。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="start" scheme="http://yoursite.com/tags/start/"/>
    
  </entry>
  
</feed>
