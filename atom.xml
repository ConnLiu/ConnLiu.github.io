<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leroy</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-19T03:33:11.716Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leroy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>201703-3-csp-Markdown</title>
    <link href="http://yoursite.com/2017/10/19/201703-3-csp-Markdown/"/>
    <id>http://yoursite.com/2017/10/19/201703-3-csp-Markdown/</id>
    <published>2017-10-19T03:03:37.000Z</published>
    <updated>2017-10-19T03:33:11.716Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个操作字符串的题目，记录思路，另附上100分代码。发现，这类题目采用自上而下、逐步求精的编程方法比较好写，也易于理解。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从大的结构开始处理，也就是先处理区块。</p>
<p>区块有三种：<em>段落</em>，<em>标题</em>，<em>无序列表</em>。然后他们都是由若干行内容构成的，而行内又会出现新的两种结构：强调和超级链接。所以我们还要处理<em>行内字符串</em>,由于<em>强调</em>和<em>超级链接</em>会有相互调用，那我们就单独给他们写个处理函数，方便递归调用。</p>
<p>这样，我们可以由开始要处理的三个区块，细化到处理行内字符串，再到强调和超级连接，现在就剩下两步：写好调用框架，实现各个部分的细节。</p>
<ol>
<li>段落。只要依次处理每一行，然后在首尾加上&lt;\p&gt;.</li>
<li>标题。首先处理前面的‘#’,判断标题级别，再处理该行字符串。</li>
<li>无序列表。首先处理前面的‘*’,再处理该行字符串。</li>
<li>行内字符串。如有_则处理 强调部分字符串；如有[ 则处理 超级链接部分字符串；</li>
<li>强调。 如有[ 则处理 超级链接部分字符串。</li>
<li>超级链接。 如有_则处理 强调部分字符串。</li>
</ol>
<p>两个注意点：</p>
<ol>
<li>每种结构之间没有空行！</li>
<li>输入数据除了 Markdown 语法所需，内容中不会出现 <code>#</code>、<code>*</code>、<code>_</code>、<code>[</code>、<code>]</code>、<code>(</code>、<code>)</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code> 这些字符。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">parseLink</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> &amp;i)</span></span>;</div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">parseStrong</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> &amp;i)</span></span>&#123; <span class="comment">// only return content</span></div><div class="line">   <span class="built_in">string</span> res;</div><div class="line">   <span class="keyword">while</span> (s[i]!=<span class="string">'\0'</span>)&#123;</div><div class="line">      <span class="keyword">if</span> (s[i] == <span class="string">'_'</span>)&#123; <span class="comment">// end</span></div><div class="line">         i++;</div><div class="line">         <span class="keyword">break</span>;</div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'['</span>)&#123;</div><div class="line">         i++;</div><div class="line">         res += parseLink(s, i);</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">         res += s[i];</div><div class="line">         i++;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">parseLink</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> &amp;i)</span></span>&#123; <span class="comment">// include &lt;a href="com"&gt;link&lt;/a&gt;</span></div><div class="line">   <span class="built_in">string</span> res, text;</div><div class="line">   <span class="keyword">int</span> beg = i;</div><div class="line">   <span class="keyword">while</span> (s[i]!=<span class="string">'\0'</span>)&#123;</div><div class="line">      <span class="keyword">if</span> (s[i] == <span class="string">'_'</span>)&#123; <span class="comment">// &lt;em&gt;</span></div><div class="line">         i++;</div><div class="line">         res += <span class="string">"&lt;em&gt;"</span>+parseStrong(s, i)+<span class="string">"&lt;/em&gt;"</span>;</div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">']'</span>)&#123; <span class="comment">//</span></div><div class="line">         text = res;</div><div class="line">         res = <span class="string">""</span>;</div><div class="line">         i++;</div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'('</span>)&#123;</div><div class="line">         i++;</div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">')'</span>)&#123;</div><div class="line">         i++;</div><div class="line">         res = <span class="string">"&lt;a href=\""</span>+res+<span class="string">"\"&gt;"</span>+text+<span class="string">"&lt;/a&gt;"</span>;</div><div class="line">         <span class="keyword">break</span>;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">         res += s[i];</div><div class="line">         i++;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">parseLine</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</div><div class="line">   <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">   <span class="built_in">string</span> res;</div><div class="line">   <span class="keyword">while</span> (s[i]!=<span class="string">'\0'</span>)&#123;</div><div class="line">      <span class="keyword">if</span> (s[i]==<span class="string">'_'</span>)&#123;</div><div class="line">         i++;</div><div class="line">         res += <span class="string">"&lt;em&gt;"</span>+parseStrong(s, i)+<span class="string">"&lt;/em&gt;"</span>;</div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>( s[i]==<span class="string">'['</span> )&#123;</div><div class="line">         i++;</div><div class="line">         res += parseLink(s, i);</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">         res += s[i];</div><div class="line">         i++;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//   freopen("data.txt", "r", stdin);</span></div><div class="line">   <span class="built_in">string</span> s, res;</div><div class="line">   <span class="keyword">while</span> (getline(<span class="built_in">cin</span>,s))&#123;</div><div class="line">         <span class="comment">// cout &lt;&lt; "s:" &lt;&lt; s &lt;&lt; endl;</span></div><div class="line">         <span class="comment">//cout &lt;&lt; "res:"&lt;&lt; res &lt;&lt; endl;</span></div><div class="line">         <span class="keyword">if</span> (s==<span class="string">""</span>)&#123;</div><div class="line"></div><div class="line">         &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'*'</span>)&#123; <span class="comment">//ul</span></div><div class="line">            res += <span class="string">"&lt;ul&gt;\n"</span>;</div><div class="line">            <span class="keyword">while</span> (s!=<span class="string">""</span>)&#123;</div><div class="line">                  <span class="keyword">int</span> i=<span class="number">2</span>;</div><div class="line">                  <span class="keyword">while</span> (s[i]==<span class="string">' '</span>) i++;</div><div class="line">                  res += <span class="string">"&lt;li&gt;"</span> + parseLine(s.substr(i)) + <span class="string">"&lt;/li&gt;\n"</span>;</div><div class="line">                  <span class="keyword">if</span> (!getline(<span class="built_in">cin</span>, s)) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            res += <span class="string">"&lt;/ul&gt;\n"</span>;</div><div class="line">         &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'#'</span>)&#123; <span class="comment">// process one line</span></div><div class="line">            <span class="keyword">int</span> i=<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (s[i]==<span class="string">'#'</span>) i++;</div><div class="line">            <span class="keyword">char</span> cnt = i + <span class="string">'0'</span>;</div><div class="line">            <span class="keyword">while</span> (s[i]==<span class="string">' '</span>) i++;</div><div class="line">            res = res + <span class="string">"&lt;h"</span> + cnt +<span class="string">"&gt;"</span> + parseLine(s.substr(i)) + <span class="string">"&lt;/h"</span> + cnt + <span class="string">"&gt;\n"</span>;</div><div class="line">         &#125;<span class="keyword">else</span>&#123; <span class="comment">// &lt;p&gt;</span></div><div class="line">            res += <span class="string">"&lt;p&gt;"</span> + parseLine(s);</div><div class="line">            <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)&amp;&amp;s!=<span class="string">""</span>)&#123;</div><div class="line">                  res += <span class="string">"\n"</span> + parseLine(s);</div><div class="line">            &#125;</div><div class="line">            res += <span class="string">"&lt;/p&gt;\n"</span>;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="built_in">cout</span> &lt;&lt; res ;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个操作字符串的题目，记录思路，另附上100分代码。发现，这类题目采用自上而下、逐步求精的编程方法比较好写，也易于理解。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>ping命令（GUI版）的Python实现</title>
    <link href="http://yoursite.com/2017/06/12/ping%E5%91%BD%E4%BB%A4%EF%BC%88GUI%E7%89%88%EF%BC%89%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/06/12/ping命令（GUI版）的Python实现/</id>
    <published>2017-06-12T07:53:18.000Z</published>
    <updated>2017-06-12T08:21:27.740Z</updated>
    
    <content type="html"><![CDATA[<p>这个小程序早在4月中旬就写完了，但是由于是一门课程的实验，先写出来似乎不太好，现在补上记录。<br><a id="more"></a></p>
<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ol>
<li><p>ping命令的工作流程<br>Ping是基于ICMP（Internet Control Message Protocol）协议实现的，而ICMP协议是在IP层实现的。<br>Ping实际上是发起者发送一个Echo Request(type = 8)的ICMP报文，远程主机回应一个Echo Reply(type = 0)的过程。</p>
</li>
<li><p>ICMP协议的包格式<br>ICMP协议的包格式（来自wiki）：</p>
</li>
</ol>
<p><img src="http://liukun.tech/pic/ping_icmp.png" alt=""></p>
<p>前面是IP头，固定20字节大小，开始自己还自己组装了一个IP头，结果调试时出错才发现原来socket使用了ICMP协议就已经固定了IP头，自己只需要也只能组装ICMP头和数据发送就好。</p>
<p>其中Echo Request的ICMP包格式详细如下（from wiki）：</p>
<p><img src="http://liukun.tech/pic/ping_icmp0.png" alt=""></p>
<h2 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h2><p>话不多说，先上函数关系图：</p>
<p><img src="http://liukun.tech/pic/ping_relation.png" alt=""></p>
<ol>
<li><p>Startping<br>此函数响应页面的start按钮的点击事件，将输入的网址处理得到对应的ping命令，再调用icmp_ping</p>
</li>
<li><p>icmp_ping(self, dns, count, timeout)<br>首先通过dns得到网站的IP地址，然后创建icmp协议的socket嵌套字，得到当前进程的pid，以此调用ping函数发送报文，再调用接收receivePing函数，最后就是显示界面的一些信息的输出</p>
</li>
<li><p>ping<br>ping函数就是组建了icmp头部报文，然后将当前时间作为数据部分，发给指定的ip；这里主要调用了一个Python特别好的轮子struct.pack函数，可以方便得组装不同长度的数据</p>
</li>
<li><p>receivePing<br>首先要有一个机制控制在timeout时间内等待，否则就退出，所以要记录进入函数的时间，只要时间差超过timeout就退出。<br>这里又用了一个Python的一个好轮子select.select，等待时间内如果socket接收到数据就退出，接着如果接收到数据，就判断是不是接收到了指定PID发送的数据且Echo Reply(type = 0)；否则，在时间允许内继续等待接收</p>
</li>
<li><p>checksum<br>这个函数比较简单，只是有些细节要稍微调试一下，实现了互联网检验和</p>
</li>
</ol>
<p>以上函数具体代码<a href="http://liukun.tech/codes/ping_ui.py" target="_blank" rel="external">此处</a>下载查阅。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>执行“ ping baidu.com –t 1 –n 2 ”，可以看到检测到4条icmp报文，两条发送两条接收，并且都是发送成功和接收成功的报文，如下图所示：</p>
<p><img src="http://liukun.tech/pic/ping_test0.png" alt=""></p>
<p>详细对比接收到的数据包与本程序显示的数据，可以看到显示数据完全正确，如下图：</p>
<p><img src="http://liukun.tech/pic/ping_test1.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个小程序早在4月中旬就写完了，但是由于是一门课程的实验，先写出来似乎不太好，现在补上记录。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Android实现连接与释放蓝牙耳机</title>
    <link href="http://yoursite.com/2017/04/23/Android%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%87%8A%E6%94%BE%E8%93%9D%E7%89%99%E8%80%B3%E6%9C%BA/"/>
    <id>http://yoursite.com/2017/04/23/Android实现连接与释放蓝牙耳机/</id>
    <published>2017-04-23T08:53:06.000Z</published>
    <updated>2017-04-23T10:04:38.859Z</updated>
    
    <content type="html"><![CDATA[<p>在Android程序中可以实现自动扫描蓝牙、配对蓝牙、建立数据通道。 而蓝牙分为不同的类型，不同类型的蓝牙设备连接方式也不尽相同，例如蓝牙耳机（蓝牙音箱）一般都支持A2DP（蓝牙立体声，用于音乐播放）、HFP协议（通话），所以下面操作要同时操作A2DP和HFP，两个都连接成功，才算连接成功。<br><a id="more"></a><br>首先申明一下权限，最后两个是因为在Android6.0中才需要的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_COARSE_LOCATION"</span>/&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_FINE_LOCATION"</span>/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="扫描蓝牙设备"><a href="#扫描蓝牙设备" class="headerlink" title="扫描蓝牙设备"></a>扫描蓝牙设备</h2><ol>
<li><p>注册并监听广播： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注册Receiver来获取蓝牙设备相关的结果</span></div><div class="line">        IntentFilter intent = <span class="keyword">new</span> IntentFilter();</div><div class="line">        intent.addAction(BluetoothDevice.ACTION_FOUND);<span class="comment">// 用BroadcastReceiver来取得搜索结果</span></div><div class="line">        intent.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);</div><div class="line">        intent.addAction(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED);</div><div class="line">        intent.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);</div><div class="line">        intent.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);</div><div class="line">        intent.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);</div><div class="line">        registerReceiver(searchDevices, intent);</div></pre></td></tr></table></figure>
</li>
<li><p>初始化蓝牙，启动扫描： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">btAdapt = BluetoothAdapter.getDefaultAdapter();<span class="comment">// 初始化本机蓝牙功能</span></div><div class="line"><span class="keyword">if</span> (btAdapt.isEnabled()) &#123;</div><div class="line">        tbtnSwitch.setChecked(<span class="keyword">false</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        tbtnSwitch.setChecked(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">btAdapt.startDiscovery();</div></pre></td></tr></table></figure>
</li>
<li><p>配对指定的蓝牙设备：</p>
<p> 首先我们对扫描的结果按类型进行筛选，只保留我们需要的蓝牙耳机：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(device.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET </div><div class="line">|| device.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE)&#123;  </div><div class="line"><span class="comment">//蓝牙耳机  </span></div><div class="line">&#125;  </div><div class="line"><span class="comment">//再配对设备，这个和普通蓝牙一样：</span></div><div class="line">btDev.createBond();</div></pre></td></tr></table></figure>
</li>
<li><p>初始化BluetoothHeadset和BTA2DP:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">BluetoothProfile.ServiceListener btService = <span class="keyword">new</span> BluetoothProfile.ServiceListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(<span class="keyword">int</span> profile, BluetoothProfile proxy)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"log"</span>, <span class="string">"onServiceConnected"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (profile == BluetoothProfile.HEADSET) &#123;</div><div class="line">                mBluetoothHeadset = (BluetoothHeadset) proxy;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (profile == BluetoothProfile.A2DP) &#123;</div><div class="line">                mBTA2DP = (BluetoothA2dp) proxy;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(<span class="keyword">int</span> profile)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (profile == BluetoothProfile.HEADSET) &#123;</div><div class="line">            mBluetoothHeadset = <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (profile == BluetoothProfile.A2DP) &#123;</div><div class="line">            mBTA2DP = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//然后调用下面两句即可触发btService的onServiceConnected函数</span></div><div class="line">btAdapt.getProfileProxy(mContext, btService,BluetoothProfile.HEADSET);</div><div class="line">btAdapt.getProfileProxy(mContext, btService,BluetoothProfile.A2DP);</div></pre></td></tr></table></figure>
</li>
<li><p>建立数据连接:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connectAudio</span><span class="params">(BluetoothDevice btDev)</span></span>&#123;</div><div class="line">    Method m = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        m = mBluetoothHeadset.getClass().getDeclaredMethod(<span class="string">"connect"</span>,BluetoothDevice.class);</div><div class="line">        m.setAccessible(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">boolean</span> successHeadset = (Boolean)m.invoke(mBluetoothHeadset, btDev);</div><div class="line">        <span class="keyword">if</span>( successHeadset )&#123;</div><div class="line">            Toast.makeText(mContext,<span class="string">"连接成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            Toast.makeText(mContext,<span class="string">"连接失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mBTA2DP.getConnectionState(btDev) != BluetoothProfile.STATE_CONNECTED)&#123;</div><div class="line">            mBTA2DP.getClass()</div><div class="line">                    .getMethod(<span class="string">"connect"</span>, BluetoothDevice.class)</div><div class="line">                    .invoke(mBTA2DP, btDev);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>断开数据连接</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">(BluetoothDevice btDev)</span></span>&#123;</div><div class="line">    Method m = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        m = mBluetoothHeadset.getClass().getDeclaredMethod(<span class="string">"disconnect"</span>,BluetoothDevice.class);</div><div class="line">        m.setAccessible(<span class="keyword">true</span>);</div><div class="line">        m.invoke(mBluetoothHeadset, btDev);</div><div class="line">        Log.e(<span class="string">"Headset disconnect"</span>,<span class="string">"Headset"</span>+mBluetoothHeadset.getConnectionState(device));</div><div class="line">        m = mBTA2DP.getClass().getDeclaredMethod(<span class="string">"disconnect"</span>,BluetoothDevice.class);</div><div class="line">        m.setAccessible(<span class="keyword">true</span>);</div><div class="line">        m.invoke(mBTA2DP, btDev);</div><div class="line">        Log.e(<span class="string">"mBTA2DP disconnect"</span>,<span class="string">"Headset"</span>+mBTA2DP.getConnectionState(device));</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android程序中可以实现自动扫描蓝牙、配对蓝牙、建立数据通道。 而蓝牙分为不同的类型，不同类型的蓝牙设备连接方式也不尽相同，例如蓝牙耳机（蓝牙音箱）一般都支持A2DP（蓝牙立体声，用于音乐播放）、HFP协议（通话），所以下面操作要同时操作A2DP和HFP，两个都连接成功，才算连接成功。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-Contest27-2 &amp;&amp; 556-Next Greater Element III</title>
    <link href="http://yoursite.com/2017/04/16/leetcode-Contest27-2-556-Next-Greater-Element-III/"/>
    <id>http://yoursite.com/2017/04/16/leetcode-Contest27-2-556-Next-Greater-Element-III/</id>
    <published>2017-04-16T07:19:25.000Z</published>
    <updated>2017-04-16T13:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>铛铛铛！！！ 这周的任务完成！</p>
<p>这次接着上次，完成Contest27的题目，但是第四题打不开了，所以就写第三题。<br><a id="more"></a><br>原题<a href="https://leetcode.com/contest/leetcode-weekly-contest-27/problems/next-greater-element-iii/" target="_blank" rel="external">链接</a></p>
<p>题干也少，就顺便复制过来，如下：</p>
<p>Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.</p>
<p><strong>Example 1:</strong></p>
<p>Input: 12</p>
<p>Output: 21</p>
<p><strong>Example 2:</strong></p>
<p>Input: 21</p>
<p>Output: -1</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>i 从低位到高位遍历，每次： 找出 i 之前的比其大的元素集中最小的元素，找到了就两者交换，再将 i 之前的元素按低位大高位小的顺序排列；未找到i就移到下一位。</p>
<p>如果从低位到高位都没有找到这样的元素，就返回-1；否则，如果<strong>没有超过0x7fffffff</strong>就返回新的数值。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nextGreaterElement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp = n, size=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> data[<span class="number">32</span>];</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">while</span>( tmp&gt;<span class="number">0</span> )&#123;</div><div class="line">            <span class="keyword">int</span> x = tmp%<span class="number">10</span>;</div><div class="line">            data[size] = x;</div><div class="line">            tmp /= <span class="number">10</span>;</div><div class="line">            size++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</div><div class="line">            <span class="keyword">int</span> m = <span class="number">10</span>, pos = <span class="number">-1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span>; j--)&#123;</div><div class="line">                <span class="keyword">if</span> ( data[j]&gt;data[i] &amp;&amp; data[j]&lt;m)&#123;</div><div class="line">                    m = data[j];</div><div class="line">                    pos = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>( m != <span class="number">10</span> )&#123; <span class="comment">//find</span></div><div class="line">                flag = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">int</span> t = data[i];</div><div class="line">                data[i] = data[pos];</div><div class="line">                data[pos] = t;</div><div class="line">                sort(data,data+i,greater&lt;<span class="keyword">int</span>&gt;());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!flag)   <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=size<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            res = res*<span class="number">10</span>+data[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( res &gt; <span class="number">0x7fffffff</span> ) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p><strong>Four lines solution</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextGreaterElement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">auto</span> digits = to_string(n);</div><div class="line">    next_permutation(begin(digits), end(digits));</div><div class="line">    <span class="keyword">auto</span> res = stoll(digits);</div><div class="line">    <span class="keyword">return</span> (res &gt; INT_MAX || res &lt;= n) ? <span class="number">-1</span> : res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个代码使用了三个好轮子：</p>
<ol>
<li>to_string(int n).  将整数n直接转换为string类型</li>
<li>stoll(string s).  将string类型直接转换为int类型</li>
<li>next_permutation(begin(digits), end(digits)). 重新排列范围内的元素[第一，最后一个）<strong>(注意前面是中括号代表包括，后面是小括号代表不包括)</strong>返回按照字典序排列的下一个值较大的组合；如果有一个更高的排列，它重新排列元素，并返回true；如果这是不可能的（因为它已经在最大可能的排列），它按升序排列重新元素，并返回false。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;铛铛铛！！！ 这周的任务完成！&lt;/p&gt;
&lt;p&gt;这次接着上次，完成Contest27的题目，但是第四题打不开了，所以就写第三题。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-Contest27-1</title>
    <link href="http://yoursite.com/2017/04/09/leetcode-Contest27-1/"/>
    <id>http://yoursite.com/2017/04/09/leetcode-Contest27-1/</id>
    <published>2017-04-09T13:24:24.000Z</published>
    <updated>2017-04-16T13:35:27.356Z</updated>
    
    <content type="html"><![CDATA[<p>这周最后一天开始最后一道题，但是这次第一次参加了Contest，写了两道题取得名次736/1900，还需要加油！</p>
<p>这次四道题目，今天先记录一下考试中写出来的两道题目，明天再写剩下的两道题目。<br><a id="more"></a></p>
<h1 id="557-Reverse-Words-in-a-String-III"><a href="#557-Reverse-Words-in-a-String-III" class="headerlink" title="557. Reverse Words in a String III"></a>557. Reverse Words in a String III</h1><p>首先原题<a href="https://leetcode.com/contest/leetcode-weekly-contest-27/problems/reverse-words-in-a-string-iii/" target="_blank" rel="external">链接</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历s，每次首先找到第一个不是空格的，然后往后找到第一个是空格的，然后把这之间的内容倒置即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (s[i] != <span class="string">' '</span>) &#123; <span class="comment">// first not space</span></div><div class="line">                <span class="keyword">int</span> j = i;</div><div class="line">                <span class="keyword">for</span> (; j &lt; s.length() &amp;&amp; s[j] != <span class="string">' '</span>; j++) &#123; &#125;  <span class="comment">// first space</span></div><div class="line">                reverse(s.begin() + i, s.begin() + j);</div><div class="line">                i = j - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="554-Brick-Wall"><a href="#554-Brick-Wall" class="headerlink" title="554. Brick Wall"></a>554. Brick Wall</h1><p>由于考试时候的代码已经被清空了，那下面就学习一个别人的解法,发现思路一样，但是代码比我写精简了太多。</p>
<ol>
<li>使用 auto，c++11 中的语法；</li>
<li>map首次创建的时候默认值即为0（使用unordered_map比map要快，因为插入不用寻找位置、移动元素了）；</li>
</ol>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>其实很简单，就只要累加所有行中第一块砖开始到最后一块砖前，对每一个砖结束的位置，记录总共有多少行在这个位置存在两砖分界！得到了这个数值的最大值，用行数减去它就是答案了。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">leastBricks</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; wall)</span> </span>&#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; edges;</div><div class="line">        <span class="keyword">auto</span> min_bricks = wall.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> row : wall)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>, width = <span class="number">0</span>; i &lt; row.size() - <span class="number">1</span>; ++i) <span class="comment">// skip last brick</span></div><div class="line">                min_bricks = min(min_bricks, wall.size() - (++edges[width += row[i]]));</div><div class="line">        <span class="keyword">return</span> min_bricks;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周最后一天开始最后一道题，但是这次第一次参加了Contest，写了两道题取得名次736/1900，还需要加油！&lt;/p&gt;
&lt;p&gt;这次四道题目，今天先记录一下考试中写出来的两道题目，明天再写剩下的两道题目。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-86-Partition List</title>
    <link href="http://yoursite.com/2017/04/07/leetcode-86-Partition-List/"/>
    <id>http://yoursite.com/2017/04/07/leetcode-86-Partition-List/</id>
    <published>2017-04-07T12:45:13.000Z</published>
    <updated>2017-04-07T13:13:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>这次完成的是一道链表操作的题目，其实昨天就开始写了，虽然代码写出来，但是由于在寝室写的，思路比较乱，有些细节没有把握好；今天花了5分钟理了理思路就一下子AC了，一方面觉得真的是一个思考的环境和心态很重要，另一方面最大感触是给出错误的测试用例真的太棒了！能够帮助我快速定位到错误。（这一点上csp就显得十分困难）</p>
<a id="more"></a>
<p><a href="https://leetcode.com/problems/partition-list/#/description" target="_blank" rel="external">原题链接</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题目也只是一道中等难度的题目，看完之后感觉就肯定会有思路的，再推敲一下就出来了，我的思路如下：</p>
<ol>
<li><strong>设置指针p、prep和pLess。</strong>因为要把所有小于x的值都放到前面，那么就肯定需要遍历所有的节点，并且还需要移动节点，那么肯定就要设置一个遍历的指针p以及前驱指针prep；最后因为每找到一个小于x的值就要前移，那么肯定就要知道具体前移到哪！这个时候就需要一个pLess来记录最后一个小于x的节点。</li>
<li>设置好数据变量，那就可以开始我们的算法了！首先我们自己创建一个头节点hh来方便自己的操作，初始化时prep和pLess都指向hh，而p指向第一个节点。接着开始遍历，如果遇到小于x的值，那么就分两步做：第一步把这个p从链表中cut出来，这个时候prep不用变；第二步就是把p连接到pLess后面，然后pLess后移，这个时候有个小问题注意一下，可能会出现pLess走到了prep后面，这就非常不合理了！所以这种情况要把prep置为pLess（可以试一下[1] x=2的情况就知道了）。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* partition(ListNode* head, int x) &#123;</div><div class="line">        if( head == NULL )  return NULL;</div><div class="line">        ListNode hh(0), * pLess = &amp;hh, * p = head, *prep = &amp;hh;</div><div class="line">        hh.next = head;</div><div class="line">        while( p != NULL)&#123;</div><div class="line">            if( p-&gt;val&lt;x )&#123;</div><div class="line">                prep-&gt;next = p-&gt;next; // cut p</div><div class="line">            </div><div class="line">                p-&gt;next = pLess-&gt;next; // concat p</div><div class="line">                pLess-&gt;next = p;</div><div class="line">                pLess = p;</div><div class="line">                if(prep-&gt;next == pLess) prep = p;</div><div class="line">                p = prep-&gt;next;</div><div class="line">            &#125;else&#123;</div><div class="line">                </div><div class="line">                prep = p;</div><div class="line">                p = p-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return hh.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>不多说，先看一份代码。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ListNode *partition(ListNode *head, int x) &#123;</div><div class="line">    ListNode node1(0), node2(0);</div><div class="line">    ListNode *p1 = &amp;node1, *p2 = &amp;node2;</div><div class="line">    while (head) &#123;</div><div class="line">        if (head-&gt;val &lt; x)</div><div class="line">            p1 = p1-&gt;next = head;</div><div class="line">        else</div><div class="line">            p2 = p2-&gt;next = head;</div><div class="line">        head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    p2-&gt;next = NULL;</div><div class="line">    p1-&gt;next = node2.next;</div><div class="line">    return node1.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我有一种走了弯路的感觉！！！非常惭愧，把思路弄复杂了。</p>
<p>其实开两个链表，一个放小于x的，另一个放其他的，遍历一下放入对应的链表，最后再把两个链表连接起来，就OK了。</p>
<p>嗯，就是这么简单。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次完成的是一道链表操作的题目，其实昨天就开始写了，虽然代码写出来，但是由于在寝室写的，思路比较乱，有些细节没有把握好；今天花了5分钟理了理思路就一下子AC了，一方面觉得真的是一个思考的环境和心态很重要，另一方面最大感触是给出错误的测试用例真的太棒了！能够帮助我快速定位到错误。（这一点上csp就显得十分困难）&lt;/p&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-130-Surrounded Regions</title>
    <link href="http://yoursite.com/2017/04/05/leetcode-130-Surrounded-Regions/"/>
    <id>http://yoursite.com/2017/04/05/leetcode-130-Surrounded-Regions/</id>
    <published>2017-04-05T07:19:23.000Z</published>
    <updated>2017-04-05T07:37:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于上周清明节假期出去徒步旅行了，耽搁了一周的题，这周写三题补上！（多一题以示惩戒）<br><a id="more"></a></p>
<p>原题链接<a href="https://leetcode.com/problems/surrounded-regions/#/description" target="_blank" rel="external">Here</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先明确这道题形式很常见，具体思路也很容易想到：</p>
<ol>
<li>扫描上下左右四条边，以其中的‘O’为起点进行搜索相邻的‘O’（深搜广搜应该都可以），将这些‘O’都标记为‘C’；</li>
<li>将图中所有不为‘C’的置为‘X’，为‘C’的置为‘O’。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>我用的是广搜。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">    &#125;Node;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; board)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>( board.size() == <span class="number">0</span> )&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = board.size(), n = board[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">queue</span>&lt;Node&gt; q;</div><div class="line">        <span class="comment">// up ,down</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(board[i][<span class="number">0</span>] == <span class="string">'O'</span>) q.push(Node&#123;i,<span class="number">0</span>&#125;);</div><div class="line">            <span class="keyword">if</span>(board[i][n<span class="number">-1</span>] == <span class="string">'O'</span>) q.push(Node&#123;i,n<span class="number">-1</span>&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// left, right</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(board[<span class="number">0</span>][i] == <span class="string">'O'</span>) q.push(Node&#123;<span class="number">0</span>,i&#125;);</div><div class="line">            <span class="keyword">if</span>(board[m<span class="number">-1</span>][i] == <span class="string">'O'</span>) q.push(Node&#123;m<span class="number">-1</span>,i&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// bfs</span></div><div class="line">        <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">            Node t = q.front();</div><div class="line">            q.pop();</div><div class="line">            <span class="keyword">if</span>( board[t.x][t.y] == <span class="string">'C'</span> ) <span class="keyword">continue</span>;</div><div class="line">            board[t.x][t.y] = <span class="string">'C'</span>;</div><div class="line">            <span class="keyword">int</span> st[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">4</span>; k++)&#123;</div><div class="line">                <span class="keyword">int</span> x = t.x + st[k][<span class="number">0</span>], y = t.y + st[k][<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>( x&gt;=<span class="number">0</span> &amp;&amp; x&lt;m &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;n &amp;&amp; board[x][y]==<span class="string">'O'</span> )</div><div class="line">                    q.push(Node&#123;x,y&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(board[i][j]==<span class="string">'C'</span>)    board[i][j] = <span class="string">'O'</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(board[i][j]==<span class="string">'O'</span>) board[i][j] = <span class="string">'X'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>刚开始的时候我把广搜写成的是一个函数的形式，采取递归调用，那样容易理解一些，但是运行出现了“Run time error”，查阅Discussions才知道原来是递归调用可能会导致栈溢出；虽然以前也都是采用递归的没有报错，但是为了程序的健壮性，以后还是坚持   <strong>“能用迭代绝不用递归”</strong> ！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于上周清明节假期出去徒步旅行了，耽搁了一周的题，这周写三题补上！（多一题以示惩戒）&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>python wordcloud 中文显示为方格问题解决</title>
    <link href="http://yoursite.com/2017/03/28/python-wordcloud-%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B8%BA%E6%96%B9%E6%A0%BC%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2017/03/28/python-wordcloud-中文显示为方格问题解决/</id>
    <published>2017-03-28T09:01:44.000Z</published>
    <updated>2017-03-28T10:13:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习python，就想用python做一些有趣的事情，分析一下自己的QQ聊天记录，然后用标签云显示出来；首先，我就先准备熟悉一下wordcloud（制作标签云的一个强大的python包），结果发现显示中文过程中有各种坑。</p>
<a id="more"></a>
<p>首先我们看一下略微修改的wordcloud提供的官方使用代码sample.py （其中text本来是从文件中读取的，为了易于理解我改为直接赋值；另外plt.title()也是我增加的一行代码，为了单独验证plt是否能正确显示中文）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="string">"""</span></div><div class="line">Minimal Example</div><div class="line">===============</div><div class="line">Generating a square wordcloud from the US constitution using default arguments.</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</div><div class="line"></div><div class="line"><span class="comment"># Read the whole text.</span></div><div class="line">text = <span class="string">u"词语水平出现的频率"</span></div><div class="line"></div><div class="line"><span class="comment"># Generate a word cloud image</span></div><div class="line">wordcloud = WordCloud().generate(text)</div><div class="line"></div><div class="line"><span class="comment"># Display the generated image:</span></div><div class="line"><span class="comment"># the matplotlib way:</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">plt.imshow(wordcloud, interpolation=<span class="string">'bilinear'</span>)</div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line"></div><div class="line"><span class="comment"># lower max_font_size</span></div><div class="line">wordcloud = WordCloud(max_font_size=<span class="number">40</span>).generate(text)</div><div class="line">plt.figure()</div><div class="line">plt.title(<span class="string">"词语水平出现的频率"</span>)</div><div class="line">plt.imshow(wordcloud, interpolation=<span class="string">"bilinear"</span>)</div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"><span class="comment"># The pil way (if you don't have matplotlib)</span></div><div class="line"><span class="comment"># image = wordcloud.to_image()</span></div><div class="line"><span class="comment"># image.show()</span></div></pre></td></tr></table></figure></p>
<p>其中，首先是wordcloud对输入文本处理，再将结果交给库matplotlib绘制出来。那么为了判断错误出处方便，我们采取逆向一步一步解决。首先我们要保证matplotlib能够绘制出中文，再保证wordcloud处理之后的中文依旧没有乱码。</p>
<p>这样，机智的你应该也明白了，最终图片是否能显示中文，必定是有两方面的影响（matplotlib和wordcloud）。</p>
<h3 id="matplotlib的中文显示为方格"><a href="#matplotlib的中文显示为方格" class="headerlink" title="matplotlib的中文显示为方格"></a>matplotlib的中文显示为方格</h3><p>如果，图片能正确显示title为”词语水平出现的频率”，那么恭喜你：你的机器配置的matplotlib能够正确显示中文，这部分内容你就可以跳过了。</p>
<ol>
<li><p>首先，确保你的系统中有支持中文的字体。</p>
<p> 使用fc-list :lang=zh 命令即可查询</p>
<p> <img src="http://liukun.tech/pic/plt-fc-zh.png" alt=""></p>
<p> 如果没有支持的字体的话，打开windows的C:\Windows\Fonts里面拷贝一个到linux的/usr/share/fonts/下的随意一个文件夹即可；</p>
</li>
<li><p>修改matplotlib的字体为 支持中文的字体（我这里用的就是STXingkai）</p>
<p> 首先使用locate matplotlibrc 找到matplotlib配置文件的位置，然后打开它，找到font-family一项，取消注释它，同时取消注释它指向的项。例如下图中我就是取消注释font.sans-serif;最后在font.sans-serif项内容中加上支持中文的字体。别问我为什么名字是STXingkai，看1中的图。</p>
<p> <img src="http://liukun.tech/pic/pltrc-font.png" alt=""></p>
</li>
<li><p>大功告成</p>
<p> 如果，这个时候title还是显示为方格，可能需要删除一下缓存。执行 sudo rm -rf ~/.cache/matplotlib/</p>
</li>
</ol>
<h3 id="wordcloud的中文显示为方格"><a href="#wordcloud的中文显示为方格" class="headerlink" title="wordcloud的中文显示为方格"></a>wordcloud的中文显示为方格</h3><ol>
<li><p>首先，依旧是确保你的系统中有支持中文的字体。（参见上面的条目1）</p>
</li>
<li><p>找到wordcloud的配置文件</p>
<p> 使用locate wordcloud.rc找到后，打开文件，找到 FONT_PATH的赋值语句（一般在引包之后的第二行），然后更改第三个参数为支持中文字体的 <strong>文件名</strong>。 </p>
</li>
<li><p>大功告成</p>
<p> <img src="http://liukun.tech/pic/plt-result.png" alt=""></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习python，就想用python做一些有趣的事情，分析一下自己的QQ聊天记录，然后用标签云显示出来；首先，我就先准备熟悉一下wordcloud（制作标签云的一个强大的python包），结果发现显示中文过程中有各种坑。&lt;/p&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-498-Diagonal Traverse</title>
    <link href="http://yoursite.com/2017/03/26/leetcode-498-Diagonal-Traverse/"/>
    <id>http://yoursite.com/2017/03/26/leetcode-498-Diagonal-Traverse/</id>
    <published>2017-03-26T10:31:51.000Z</published>
    <updated>2017-03-28T11:44:39.028Z</updated>
    
    <content type="html"><![CDATA[<p>终于，csp考试拿了一个较为理想的成绩380分，但是为了保证编程能力，我给自己定下一个目标，每周至少刷一道leetcode题目。这次刷的是第498题，这是一道中等难度的题目，并且场景还与一次csp考试中的第三题十分相似。</p>
<a id="more"></a>
<p>题目内容请移步  <a href="https://leetcode.com/problems/diagonal-traverse/#/description" target="_blank" rel="external">原题链接</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我观察到其实箭头走向一般都是斜向上、斜向下，只有在边界时才会横向或纵向移动，并且每次斜向上与斜向下都发生在到达边界后，于是我就由此着手。</p>
<ol>
<li>设置stepX和stepY为每一次x、y变化的量。这样斜向上、斜向下走就容易设置了，斜向上就是stepX为-1，stepY为1（这里具体的值和x、y的放置有关，我将行设置为x，列设置为y）；</li>
<li>当到达边界时，就进行相应的纵向或横向位移，同时更换步进方向（原先斜上就改为斜下）。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>下面就是我的代码：
</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findDiagonalOrder(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">if</span>(matrix.empty())  <span class="keyword">return</span> res;</div><div class="line">    <span class="keyword">int</span> m = matrix.size(), n = matrix[<span class="number">0</span>].size(), size = m*n;</div><div class="line">    <span class="keyword">int</span> stepX = <span class="number">-1</span>, stepY = <span class="number">1</span>, x = <span class="number">1</span>, y = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        x += stepX;</div><div class="line">        y += stepY;</div><div class="line">        <span class="keyword">if</span>( x&lt;=m<span class="number">-1</span> &amp;&amp; x&gt;=<span class="number">0</span> &amp;&amp; y&lt;=n<span class="number">-1</span> &amp;&amp; y&gt;=<span class="number">0</span> )</div><div class="line">            res.push_back(matrix[x][y]);</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            x -= stepX;</div><div class="line">            y -= stepY;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>( x==m<span class="number">-1</span> )&#123;</div><div class="line">            <span class="keyword">if</span>( y==n<span class="number">-1</span>)&#123; <span class="comment">// y == n-1</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                y++;</div><div class="line">                res.push_back(matrix[x][y]);</div><div class="line">            &#125;</div><div class="line">            stepX = -stepX;</div><div class="line">            stepY = -stepY;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( x==<span class="number">0</span> )&#123;</div><div class="line">            <span class="keyword">if</span>( y==n<span class="number">-1</span>)&#123; <span class="comment">// y == n-1</span></div><div class="line">                x++;</div><div class="line">                res.push_back(matrix[x][y]);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                y++;</div><div class="line">                res.push_back(matrix[x][y]);</div><div class="line">            &#125;</div><div class="line">            stepX = -stepX;</div><div class="line">            stepY = -stepY;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( y==<span class="number">0</span> )&#123;</div><div class="line">            <span class="keyword">if</span>( x==m<span class="number">-1</span> )&#123;</div><div class="line">                y++;</div><div class="line">                res.push_back(matrix[x][y]);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                x++;</div><div class="line">                res.push_back(matrix[x][y]);</div><div class="line">            &#125;</div><div class="line">            stepX = -stepX;</div><div class="line">            stepY = -stepY;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( y==n<span class="number">-1</span> )&#123;</div><div class="line">            <span class="keyword">if</span>( x==m<span class="number">-1</span> )&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                x++;</div><div class="line">                res.push_back(matrix[x][y]);</div><div class="line">            &#125;</div><div class="line">            stepX = -stepX;</div><div class="line">            stepY = -stepY;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>看了看Solutions里面最高的代码是java写的，思路和我的一样，但是实现的实在是精简的多！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findDiagonalOrder(<span class="keyword">int</span>[][] matrix) &#123;</div><div class="line">    <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</div><div class="line">    <span class="keyword">int</span> m = matrix.length, n = matrix[<span class="number">0</span>].length;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[m * n];</div><div class="line">    <span class="keyword">int</span> row = <span class="number">0</span>, col = <span class="number">0</span>, d = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span>[][] dirs = &#123;&#123;-<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, -<span class="number">1</span>&#125;&#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m * n; i++) &#123;</div><div class="line">        result[i] = matrix[row][col];</div><div class="line">        row += dirs[d][<span class="number">0</span>];</div><div class="line">        col += dirs[d][<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (row &gt;= m) &#123; row = m - <span class="number">1</span>; col += <span class="number">2</span>; d = <span class="number">1</span> - d;&#125;</div><div class="line">        <span class="keyword">if</span> (col &gt;= n) &#123; col = n - <span class="number">1</span>; row += <span class="number">2</span>; d = <span class="number">1</span> - d;&#125;</div><div class="line">        <span class="keyword">if</span> (row &lt; <span class="number">0</span>)  &#123; row = <span class="number">0</span>; d = <span class="number">1</span> - d;&#125;</div><div class="line">        <span class="keyword">if</span> (col &lt; <span class="number">0</span>)  &#123; col = <span class="number">0</span>; d = <span class="number">1</span> - d;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于，csp考试拿了一个较为理想的成绩380分，但是为了保证编程能力，我给自己定下一个目标，每周至少刷一道leetcode题目。这次刷的是第498题，这是一道中等难度的题目，并且场景还与一次csp考试中的第三题十分相似。&lt;/p&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>201512-4 csp 送货</title>
    <link href="http://yoursite.com/2017/03/14/201512-4-csp-%E9%80%81%E8%B4%A7/"/>
    <id>http://yoursite.com/2017/03/14/201512-4-csp-送货/</id>
    <published>2017-03-14T09:15:35.000Z</published>
    <updated>2017-03-28T08:57:46.944Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目思路比较简单，但是细节很多、坑很多，然后我就一一踩了个遍，写了好几天才一百。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>细数一下踩过的坑。</p>
<ol>
<li>欧拉回路、通路存在的首要要求是图是 连通的;</li>
<li>欧拉回路存在的条件是奇度数点个数为0，而欧拉通路存在的条件是奇度数点个数为2；</li>
<li>本题中要求了起始点必须为1；</li>
<li>题中要求输出的欧拉通路路径按字典序输出，那么就要求dfs时要先把各点的邻边排序。</li>
<li>int开1w*1w会超过256MB的限制，但是换成char或bool类型就不会。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 欧拉回路 </span></div><div class="line"><span class="comment">/*无向图欧拉回路算法流程</span></div><div class="line">1.如果此时没有点与该点相连，那么就加入路径中；</div><div class="line">2.如果有点与该点相连，那么就加入队列之中，遍历这些点，直到没有相连的点；</div><div class="line">3.处理当前的点，删除这条走过的边，并在其相邻的点上进行同样的操作，并</div><div class="line">把删除的点加入到路径中。</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100001 </span></div><div class="line"><span class="keyword">int</span> num = <span class="number">1</span>,n ,m;</div><div class="line"><span class="keyword">int</span> match[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">char</span> Array[maxn][maxn]=&#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> Record[maxm];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">	vis[s] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> len = G[s].size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		<span class="keyword">int</span> k = G[s][i];</div><div class="line">		<span class="keyword">if</span>( Array[s][k] &amp;&amp; !vis[k] )&#123;</div><div class="line">			vis[k] = <span class="number">1</span>;</div><div class="line">			dfs(k);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (match[x] == <span class="number">0</span>)</div><div class="line">		Record[num++] = x;</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		</div><div class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = G[x].begin();</div><div class="line">		<span class="keyword">for</span>(; it != G[x].end(); it++)&#123;  <span class="comment">//切记！！！！ 欧拉回路 dfs时候需要按字典序遍历相邻的点 </span></div><div class="line">			<span class="keyword">int</span> k = *it;				<span class="comment">// 所以 G【x】 是升序排列 </span></div><div class="line">			<span class="keyword">if</span> (Array[x][k]!=<span class="number">0</span>)&#123;</div><div class="line">				Array[x][k]--;</div><div class="line">				Array[k][x]--;</div><div class="line">				match[x]--;</div><div class="line">				match[k]--;</div><div class="line">				solve(k);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		Record[num++] = x;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">	<span class="keyword">int</span> m_tmp = m;</div><div class="line">	<span class="keyword">while</span>(m_tmp--)&#123;</div><div class="line">		<span class="keyword">int</span> a,b;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">		G[a].push_back(b);</div><div class="line">		G[b].push_back(a);</div><div class="line">		Array[a][b]++;</div><div class="line">		Array[b][a]++;</div><div class="line">		match[a]++;</div><div class="line">		match[b]++;</div><div class="line">	&#125;</div><div class="line">	dfs(<span class="number">1</span>);</div><div class="line">	<span class="keyword">int</span> oddCnt = <span class="number">0</span>, start = n;</div><div class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">		sort(G[i].begin(),G[i].end(),less&lt;<span class="keyword">int</span>&gt;());</div><div class="line">		<span class="keyword">if</span>( match[i]%<span class="number">2</span> == <span class="number">1</span> )&#123;</div><div class="line">			oddCnt++;</div><div class="line">			start = min(start,i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( !vis[i] ) flag = <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( !flag )&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>( oddCnt == <span class="number">0</span> )&#123;</div><div class="line">		start = <span class="number">1</span>;</div><div class="line">		solve(<span class="number">1</span>);</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;start;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=num<span class="number">-2</span>; i&gt;<span class="number">0</span>; i--)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;Record[i];</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>( oddCnt == <span class="number">2</span> &amp;&amp; start == <span class="number">1</span>)&#123;</div><div class="line">		solve(<span class="number">1</span>);</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;start;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=num<span class="number">-2</span>; i&gt;<span class="number">0</span>; i--)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;Record[i];</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目思路比较简单，但是细节很多、坑很多，然后我就一一踩了个遍，写了好几天才一百。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201409-4 csp 最优配餐</title>
    <link href="http://yoursite.com/2017/03/14/201409-4-csp-%E6%9C%80%E4%BC%98%E9%85%8D%E9%A4%90/"/>
    <id>http://yoursite.com/2017/03/14/201409-4-csp-最优配餐/</id>
    <published>2017-03-14T09:15:13.000Z</published>
    <updated>2017-03-28T08:57:27.960Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目思路比较简单，就是一个bfs的思想。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>嗯，虽然只是一个简单的bfs思想就可以解决，但是。。。。。</p>
<p>此题有坑点！！！！</p>
<p>虽然题目说了xi，yi是方格图中的横坐标和纵坐标，而且还没有给出它们的范围，没想到居然默认是大于0的，所谓的n*n方格图中坐标范围却是1-n非0 - n-1.</p>
<p>除此之外，100分到手。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1001</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 99999999</span></div><div class="line"><span class="keyword">struct</span> point&#123;</div><div class="line">	<span class="keyword">int</span> x,y;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> guest&#123;</div><div class="line">	<span class="keyword">int</span> x, y, need;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> stone[maxn][maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> n, m, k, d;</div><div class="line"><span class="built_in">vector</span>&lt;point&gt; shop;</div><div class="line"><span class="built_in">vector</span>&lt;guest&gt; guests;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>( x&lt;=<span class="number">0</span> || x&gt;n || y&lt;=<span class="number">0</span> || y&gt;n || stone[x][y])&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(point p)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> cost = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> x = p.x, y = p.y;</div><div class="line">	<span class="built_in">map</span>[x][y] = <span class="number">0</span>;</div><div class="line">	<span class="built_in">queue</span>&lt;point&gt; q;</div><div class="line">	q.push(p);</div><div class="line">	<span class="keyword">while</span>( !q.empty() )&#123;</div><div class="line">		p = q.front();</div><div class="line">		q.pop();</div><div class="line">		x = p.x, y = p.y;</div><div class="line">		cost = <span class="built_in">map</span>[x][y];</div><div class="line">		<span class="keyword">if</span>( judge(x,y+<span class="number">1</span>) &amp;&amp; <span class="built_in">map</span>[x][y+<span class="number">1</span>] &gt; cost+<span class="number">1</span>)&#123;</div><div class="line">			<span class="built_in">map</span>[x][y+<span class="number">1</span>] = cost + <span class="number">1</span>;</div><div class="line">			q.push((point)&#123;x,y+<span class="number">1</span>&#125;);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( judge(x+<span class="number">1</span>,y) &amp;&amp; <span class="built_in">map</span>[x+<span class="number">1</span>][y] &gt; cost+<span class="number">1</span> )&#123;</div><div class="line">			<span class="built_in">map</span>[x+<span class="number">1</span>][y] = cost + <span class="number">1</span>;</div><div class="line">			q.push((point)&#123;x+<span class="number">1</span>,y&#125;);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( judge(x<span class="number">-1</span>,y) &amp;&amp; <span class="built_in">map</span>[x<span class="number">-1</span>][y] &gt; cost+<span class="number">1</span> )&#123;</div><div class="line">			<span class="built_in">map</span>[x<span class="number">-1</span>][y] = cost + <span class="number">1</span>;</div><div class="line">			q.push((point)&#123;x<span class="number">-1</span>,y&#125;);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( judge(x,y<span class="number">-1</span>) &amp;&amp; <span class="built_in">map</span>[x][y<span class="number">-1</span>] &gt; cost+<span class="number">1</span> )&#123;</div><div class="line">			<span class="built_in">map</span>[x][y<span class="number">-1</span>] = cost + <span class="number">1</span>;</div><div class="line">			q.push((point)&#123;x,y<span class="number">-1</span>&#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;d;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;<span class="comment">//分店</span></div><div class="line">		<span class="keyword">int</span> a,b;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">		shop.push_back((point)&#123;a,b&#125;);</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;<span class="comment">//客户 </span></div><div class="line">		<span class="keyword">int</span> a,b,c;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</div><div class="line">		guests.push_back((guest)&#123;a,b,c&#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;d; i++)&#123;<span class="comment">//障碍点 </span></div><div class="line">		<span class="keyword">int</span> a,b;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">		stone[a][b] = <span class="literal">true</span>;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; j++)</div><div class="line">			<span class="built_in">map</span>[i][j] = INF;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">int</span> len = shop.size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</div><div class="line">		bfs(shop[i]); </div><div class="line"><span class="comment">//	for(int j=n-1; j&gt;=0; j--)&#123;  // 为了打印出消费矩阵 </span></div><div class="line"><span class="comment">//		for(int i=0; i&lt;n; i++)&#123;</span></div><div class="line"><span class="comment">//			if( map[i][j] == INF)	cout&lt;&lt;"-1"&lt;&lt;"\t";</span></div><div class="line"><span class="comment">//			else cout&lt;&lt;map[i][j]&lt;&lt;"\t";</span></div><div class="line"><span class="comment">//		&#125;</span></div><div class="line"><span class="comment">//			</span></div><div class="line"><span class="comment">//		cout&lt;&lt;endl;</span></div><div class="line"><span class="comment">//	&#125;</span></div><div class="line">	len = guests.size();</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">		<span class="keyword">int</span> x = guests[i].x, y = guests[i].y, need = guests[i].need;</div><div class="line">		res += <span class="built_in">map</span>[x][y] * need;</div><div class="line">	&#125; </div><div class="line">	<span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目思路比较简单，就是一个bfs的思想。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201412-3 csp 集合竞价</title>
    <link href="http://yoursite.com/2017/03/13/201412-3-csp-%E9%9B%86%E5%90%88%E7%AB%9E%E4%BB%B7/"/>
    <id>http://yoursite.com/2017/03/13/201412-3-csp-集合竞价/</id>
    <published>2017-03-13T14:12:01.000Z</published>
    <updated>2017-03-28T08:57:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>对于没有接触过股市的我来说，这道题目题面就有一点点复杂，后来虽然了然于心了，但是还差一点，终于80分。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>虽然我已经注意到了，要用long long类型存储，可是依然80分。</p>
<p>思路待补充。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3.5  80分 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SELL 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUY 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CANCEL 2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CAN_S 3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CAN_B 4</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</div><div class="line">	<span class="keyword">int</span> type;</div><div class="line">	<span class="keyword">float</span> f;</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> t;</div><div class="line">&#125;Node;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123; <span class="comment">// 总卖出量 和买进量 </span></div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> sell;</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> buy;</div><div class="line">&#125;Res;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,Node&gt; cmd; </div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; del;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">float</span>,Res&gt; out;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="built_in">string</span> str;</div><div class="line">	<span class="keyword">int</span> i=<span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</div><div class="line">		<span class="keyword">float</span> f;</div><div class="line">		<span class="keyword">long</span> <span class="keyword">long</span> t;</div><div class="line">		Node tmp;</div><div class="line">		<span class="keyword">if</span>(str == <span class="string">"sell"</span>)&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;f&gt;&gt;t;</div><div class="line">			tmp.type = SELL;</div><div class="line">			tmp.f = f;</div><div class="line">			tmp.t = t;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(str == <span class="string">"buy"</span>)&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;f&gt;&gt;t;</div><div class="line">			tmp.type = BUY;</div><div class="line">			tmp.f = f;</div><div class="line">			tmp.t = t;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( str == <span class="string">"cancel"</span> )&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">			tmp.type = CANCEL;</div><div class="line">			tmp.t = t;</div><div class="line">			del.push_back(t);</div><div class="line">		&#125;</div><div class="line">		cmd[i] = tmp;</div><div class="line">		i++;</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 执行cancel操作 </span></div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it_del = del.begin();</div><div class="line">	<span class="keyword">while</span>(it_del != del.end())&#123;</div><div class="line">		<span class="keyword">if</span>( cmd[*it_del].type == CAN_S )&#123;</div><div class="line">			cmd[*it_del].type = SELL;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( cmd[*it_del].type == CAN_B )&#123;</div><div class="line">			cmd[*it_del].type = BUY;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( cmd[*it_del].type == BUY )&#123;</div><div class="line">			cmd[*it_del].type = CAN_B;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( cmd[*it_del].type == SELL )&#123;</div><div class="line">			cmd[*it_del].type = CAN_S;</div><div class="line">		&#125;</div><div class="line">		it_del++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">map</span>&lt;<span class="keyword">int</span>,Node&gt;::iterator it_cmd = cmd.begin();</div><div class="line">	<span class="keyword">float</span> buy_min = <span class="number">10000</span>, sell_max = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>( it_cmd != cmd.end() )&#123;</div><div class="line">		<span class="keyword">if</span>( it_cmd-&gt;second.type == BUY )&#123;</div><div class="line"><span class="comment">//			cout&lt;&lt;it_cmd-&gt;first&lt;&lt;" buy:"&lt;&lt;it_cmd-&gt;second.t&lt;&lt;endl; </span></div><div class="line">			<span class="keyword">float</span> f = it_cmd-&gt;second.f;</div><div class="line">			<span class="keyword">long</span> <span class="keyword">long</span> t = it_cmd-&gt;second.t;</div><div class="line">			<span class="keyword">if</span>( f&lt;buy_min )&#123;</div><div class="line">				buy_min = f;</div><div class="line">			&#125; </div><div class="line">			Res res;</div><div class="line">			<span class="keyword">if</span>( out.find(f) == out.end() )&#123;  <span class="comment">//不存在 </span></div><div class="line">				res.buy = t;</div><div class="line">				res.sell = <span class="number">0</span>;</div><div class="line">				out[f] = res;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				res = out[f];</div><div class="line">				res.buy += t;</div><div class="line">				out[f] = res;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( it_cmd-&gt;second.type == SELL )&#123;</div><div class="line">			<span class="keyword">float</span> f = it_cmd-&gt;second.f;</div><div class="line">			<span class="keyword">long</span> <span class="keyword">long</span> t = it_cmd-&gt;second.t;</div><div class="line">			<span class="keyword">if</span>( f&gt;sell_max )&#123;</div><div class="line">				sell_max = f;</div><div class="line">			&#125; </div><div class="line">			Res res;</div><div class="line">			<span class="keyword">if</span>( out.find(f) == out.end() )&#123;</div><div class="line">				res.buy = <span class="number">0</span>;</div><div class="line">				res.sell = t;</div><div class="line">				out[f] = res;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				res = out[f];</div><div class="line">				res.sell += t;</div><div class="line">				out[f] = res;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		it_cmd++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">map</span>&lt;<span class="keyword">float</span>,Res&gt;::iterator it_out = out.begin();</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> total = <span class="number">0</span>;</div><div class="line">	<span class="comment">// sell add-all</span></div><div class="line">	<span class="keyword">while</span>(it_out != out.end())&#123;</div><div class="line">		Res res = it_out-&gt;second;</div><div class="line">		<span class="keyword">float</span> f = it_out-&gt;first;</div><div class="line">		res.sell += total;</div><div class="line">		total = res.sell;</div><div class="line">		it_out-&gt;second = res;</div><div class="line">		it_out++;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	it_out = out.end();</div><div class="line">	it_out--;</div><div class="line">	total = <span class="number">0</span>;</div><div class="line">	<span class="comment">// buy add-all</span></div><div class="line">	<span class="keyword">while</span>( it_out != out.begin())&#123;</div><div class="line">		Res res = it_out-&gt;second;</div><div class="line">		<span class="keyword">float</span> f = it_out-&gt;first;</div><div class="line">		res.buy += total;</div><div class="line">		total = res.buy;</div><div class="line">		it_out-&gt;second = res;</div><div class="line">		it_out--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( it_out==out.begin())&#123;</div><div class="line">		Res res = it_out-&gt;second;</div><div class="line">		res.buy += total;</div><div class="line">		total = res.buy;</div><div class="line">		it_out-&gt;second = res;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	it_out = out.end();</div><div class="line">	it_out--; </div><div class="line">	<span class="keyword">float</span> acc_f = it_out-&gt;first;</div><div class="line">	Res acc_tmp = it_out-&gt;second;</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">acc_t</span> = acc_tmp.buy &gt; acc_tmp.sell ? acc_tmp.sell:acc_tmp.buy;</div><div class="line">	</div><div class="line">	<span class="keyword">while</span>( it_out != out.begin() )&#123; <span class="comment">// max-&gt;min</span></div><div class="line">		Res res = it_out-&gt;second;</div><div class="line">		<span class="keyword">float</span> f = it_out-&gt;first;</div><div class="line">		<span class="keyword">if</span>( f &lt; buy_min ) <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">int</span> dim = res.buy &gt; res.sell ? res.sell:res.buy;</div><div class="line">		<span class="keyword">if</span>(dim &gt; <span class="keyword">acc_t</span>)&#123;</div><div class="line">			<span class="keyword">acc_t</span> = dim;</div><div class="line">			acc_f = f; </div><div class="line">		&#125;</div><div class="line">		it_out--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( it_out==out.begin() &amp;&amp; it_out-&gt;first&gt;=buy_min)&#123;</div><div class="line">		Res res = it_out-&gt;second;</div><div class="line">		<span class="keyword">float</span> f = it_out-&gt;first;</div><div class="line">		<span class="keyword">int</span> dim = res.buy &gt; res.sell ? res.sell:res.buy;</div><div class="line">		<span class="keyword">if</span>(dim &gt; <span class="keyword">acc_t</span>)&#123;</div><div class="line">			<span class="keyword">acc_t</span> = dim;</div><div class="line">			acc_f = f; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%.2f "</span>,acc_f);</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="keyword">acc_t</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于没有接触过股市的我来说，这道题目题面就有一点点复杂，后来虽然了然于心了，但是还差一点，终于80分。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201409-3 csp 字符串匹配</title>
    <link href="http://yoursite.com/2017/03/13/201409-3-csp-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <id>http://yoursite.com/2017/03/13/201409-3-csp-字符串匹配/</id>
    <published>2017-03-13T14:08:19.000Z</published>
    <updated>2017-03-28T08:57:25.383Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目思路简单，借助string的一些函数，手到擒来。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>嗯，string是个好东西，要好好学习。</p>
<p>transform(tmp_v.begin(), tmp_v.end(), tmp_v.begin(), ::toupper);</p>
<p>这个大小写转换函数（algorithm库中）也是十分好用。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> case_big,n;</div><div class="line">	<span class="built_in">string</span> s0;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v_str;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;s0&gt;&gt;case_big&gt;&gt;n;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">		<span class="built_in">string</span> s;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s;</div><div class="line">		v_str.push_back(s);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it = v_str.begin();</div><div class="line">	<span class="keyword">if</span>(case_big)&#123; <span class="comment">//大小写敏感 </span></div><div class="line">		<span class="keyword">while</span>( it != v_str.end() )&#123;</div><div class="line">			<span class="keyword">if</span>( (*it).find( s0 ) != <span class="number">-1</span>)&#123;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			&#125;</div><div class="line">			it++;</div><div class="line">		&#125; </div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="comment">// transform </span></div><div class="line">		transform(s0.begin(), s0.end(), s0.begin(), ::<span class="built_in">toupper</span>);</div><div class="line">		<span class="keyword">while</span>( it != v_str.end() )&#123;</div><div class="line">			<span class="built_in">string</span> tmp_v = *it;</div><div class="line">			transform(tmp_v.begin(), tmp_v.end(), tmp_v.begin(), ::<span class="built_in">toupper</span>);</div><div class="line">			<span class="keyword">if</span>( tmp_v.find( s0 ) != <span class="number">-1</span>)&#123;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			&#125;</div><div class="line">			it++;</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目思路简单，借助string的一些函数，手到擒来。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201503-3 csp 节日</title>
    <link href="http://yoursite.com/2017/03/13/201503-3-csp-%E8%8A%82%E6%97%A5/"/>
    <id>http://yoursite.com/2017/03/13/201503-3-csp-节日/</id>
    <published>2017-03-13T14:03:50.000Z</published>
    <updated>2017-03-28T08:57:36.056Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目思路简单，而且便于测试，只要随便找个日子对一对就OK。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先找到每一年的第一天是周几。</p>
<p>再找到当月第一天是周几。</p>
<p>再找到当月第一个周c为几号。</p>
<p>然后答案就在眼前了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_four</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>( year % <span class="number">400</span> == <span class="number">0</span> )&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>( year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span> )&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> a,b,c,y1,y2,first[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">int</span> month[ ] = &#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</div><div class="line">	<span class="keyword">int</span> dim = <span class="number">0</span>;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;y1&gt;&gt;y2;</div><div class="line">	first[<span class="number">0</span>] = <span class="number">2</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)&#123;</div><div class="line">		<span class="keyword">if</span>( is_four(i+<span class="number">1850</span><span class="number">-1</span>) )&#123; <span class="comment">//判断前一年是否闰年 </span></div><div class="line">			first[i] = first[i<span class="number">-1</span>] + <span class="number">2</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			first[i] = first[i<span class="number">-1</span>] + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( first[i] &gt;<span class="number">7</span> ) first[i] -= <span class="number">7</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//从1月1号 到 a月1号 有多少天 </span></div><div class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;a; i++)&#123;</div><div class="line">		dim += month[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( y1&gt;y2 )&#123;</div><div class="line">		<span class="keyword">int</span> tmp = y1;</div><div class="line">		y1 = y2;</div><div class="line">		y2 = tmp;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 之前一直60分， 因为每次都在用同一个量 dim ！！！ 不亦悲哉 </span></div><div class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i=y1; i&lt;=y2; i++)&#123;</div><div class="line">		<span class="keyword">int</span> dis = dim;</div><div class="line">		<span class="keyword">if</span> ( a &gt; <span class="number">2</span> &amp;&amp; is_four(i) )&#123;</div><div class="line">			dis++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> day1 = (dis%<span class="number">7</span>) + first[ i <span class="number">-1850</span> ]; <span class="comment">//本月第一天是星期几 </span></div><div class="line">		<span class="comment">//找到 第一个星期c 是几号</span></div><div class="line">		<span class="keyword">int</span> imp = c-day1 + <span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span>( imp &lt; <span class="number">1</span>)&#123;</div><div class="line">			imp += <span class="number">7</span>;	</div><div class="line">		&#125; </div><div class="line">		<span class="comment">//找到 第b个星期c 是几号</span></div><div class="line">		imp += (b<span class="number">-1</span>)*<span class="number">7</span>;</div><div class="line">		<span class="keyword">if</span>( imp &lt;= month[a] &amp;&amp; imp&gt;<span class="number">0</span> )&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d/%02d/%02d\n"</span>,i,a,imp);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( a==<span class="number">2</span> &amp;&amp; is_four(i) &amp;&amp; imp == <span class="number">29</span>)&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d/%02d/%02d\n"</span>,i,a,imp);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"none\n"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目思路简单，而且便于测试，只要随便找个日子对一对就OK。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201509-3 csp 模板生成系统</title>
    <link href="http://yoursite.com/2017/03/13/201509-3-csp-%E6%A8%A1%E6%9D%BF%E7%94%9F%E6%88%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2017/03/13/201509-3-csp-模板生成系统/</id>
    <published>2017-03-13T13:59:25.000Z</published>
    <updated>2017-03-28T08:57:38.454Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目细节很重要，注意一些特殊的情况。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><pre><code>比如 name “{{ address }}” 的情况，不能把替换之后的{{ address }}当成变量替换了（其中address也要考虑为email时）。

    比如 name “{{ name }}” 的情况，不能把替换之后的{{ name }}递归替换。
</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> m,n;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; total_s;</div><div class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; value;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</div><div class="line">	<span class="built_in">cin</span>.ignore();</div><div class="line">	<span class="keyword">while</span>(m--)&#123;</div><div class="line">		<span class="built_in">string</span> s0;</div><div class="line">		getline(<span class="built_in">cin</span>,s0);</div><div class="line">		total_s.push_back(s0);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span>(n--)&#123;</div><div class="line">		<span class="built_in">string</span> s0,s1;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s0;</div><div class="line">		<span class="built_in">cin</span>.ignore();</div><div class="line">		getline(<span class="built_in">cin</span>,s1);</div><div class="line">		value[s0] = s1.substr(<span class="number">1</span>,s1.size()<span class="number">-2</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it_s = total_s.begin();</div><div class="line">	<span class="keyword">while</span>( it_s != total_s.end() )&#123;</div><div class="line">		<span class="built_in">string</span> s0 = *it_s;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> pos = s0.find(<span class="string">"&#123;&#123; "</span>);</div><div class="line">		<span class="keyword">while</span>( pos != <span class="number">-1</span> )&#123;</div><div class="line">			<span class="keyword">int</span> j = pos+<span class="number">2</span>;</div><div class="line">			<span class="keyword">while</span>( s0[j<span class="number">-1</span>] != <span class="string">'&#125;'</span> || s0[j] != <span class="string">'&#125;'</span>)	j++;</div><div class="line">			<span class="built_in">string</span> tmp = s0.substr(pos,j-pos+<span class="number">1</span>);</div><div class="line">			<span class="keyword">bool</span> flag_value = <span class="literal">false</span>;</div><div class="line">			<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;::iterator it_m = value.begin();</div><div class="line">			<span class="keyword">while</span>( it_m != value.end() )&#123;</div><div class="line">				<span class="keyword">if</span>( tmp == <span class="string">"&#123;&#123; "</span>+ it_m-&gt;first +<span class="string">" &#125;&#125;"</span>) &#123;</div><div class="line">					flag_value = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;	</div><div class="line">				&#125;</div><div class="line">				it_m++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>( !flag_value )</div><div class="line">				s0.replace(pos,j-pos+<span class="number">1</span>,<span class="string">""</span>);</div><div class="line">			<span class="keyword">int</span> n_pos = s0.find(<span class="string">"&#123;&#123; "</span>,pos);</div><div class="line">			<span class="keyword">if</span>( n_pos == pos) <span class="keyword">break</span>;</div><div class="line">			pos = n_pos;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;::iterator it_m = value.begin();</div><div class="line">		<span class="keyword">while</span>( it_m != value.end() )&#123;</div><div class="line">			<span class="built_in">string</span> name = <span class="string">"&#123;&#123; "</span>+it_m-&gt;first+<span class="string">" &#125;&#125;"</span>;</div><div class="line">			<span class="keyword">if</span>( name == it_m-&gt;second)&#123;</div><div class="line">				it_m++;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125; </div><div class="line">			<span class="keyword">int</span> pos = s0.find(name);</div><div class="line">			<span class="keyword">while</span>( pos != <span class="number">-1</span>)&#123;</div><div class="line">				s0.replace(pos,name.size(),it_m-&gt;second);</div><div class="line">				pos = s0.find(name);</div><div class="line">			&#125;</div><div class="line">			it_m++;</div><div class="line">		&#125;</div><div class="line">		*it_s = s0;</div><div class="line">		it_s++;</div><div class="line">	&#125;</div><div class="line">	it_s = total_s.begin();</div><div class="line">	<span class="keyword">while</span>( it_s != total_s.end() )&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;*it_s&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		it_s++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目细节很重要，注意一些特殊的情况。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201512-3 csp 画图</title>
    <link href="http://yoursite.com/2017/03/13/201512-3-csp-%E7%94%BB%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/03/13/201512-3-csp-画图/</id>
    <published>2017-03-13T13:50:26.000Z</published>
    <updated>2017-03-28T08:57:43.497Z</updated>
    
    <content type="html"><![CDATA[<p>这道题写出来不难，但是有个小细节要注意。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p> 唯一的一个小细节。</p>
<p>画直线时，可能遇到的情况有三种：+、-、|。分别对应不同的处理。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line"><span class="keyword">int</span> m,n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">color</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>( a&lt;<span class="number">0</span> || a&gt;=m || b&lt;<span class="number">0</span> || b&gt;=n ||  <span class="built_in">map</span>[a][b] == c</div><div class="line">	|| <span class="built_in">map</span>[a][b] == <span class="string">'-'</span>|| <span class="built_in">map</span>[a][b] == <span class="string">'|'</span>|| <span class="built_in">map</span>[a][b] == <span class="string">'+'</span>)&#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">map</span>[a][b] = c;</div><div class="line">	color(a,b+<span class="number">1</span>,c);</div><div class="line">	color(a,b<span class="number">-1</span>,c);</div><div class="line">	color(a+<span class="number">1</span>,b,c);</div><div class="line">	color(a<span class="number">-1</span>,b,c);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> q,type,a,b,c,d;</div><div class="line">	<span class="keyword">char</span> ch;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;q;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</div><div class="line">			<span class="built_in">map</span>[j][i] = <span class="number">-1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span>(q--)&#123;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;type;</div><div class="line">		<span class="keyword">if</span>(type == <span class="number">0</span>)&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</div><div class="line">			<span class="keyword">if</span>( a == c)&#123;</div><div class="line">				<span class="keyword">if</span>( b &gt; d )&#123;</div><div class="line">					<span class="keyword">int</span> tmp = b;</div><div class="line">					b = d;</div><div class="line">					d = tmp;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=b;i&lt;=d;i++)&#123;</div><div class="line">					<span class="keyword">if</span>( <span class="built_in">map</span>[a][i] == <span class="string">'-'</span> )&#123;</div><div class="line">						<span class="built_in">map</span>[a][i] = <span class="string">'+'</span>;</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[a][i] == <span class="string">'+'</span> )&#123;</div><div class="line">						</div><div class="line">					&#125; </div><div class="line">					<span class="keyword">else</span></div><div class="line">						<span class="built_in">map</span>[a][i] = <span class="string">'|'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">if</span>( a&gt;c )&#123;</div><div class="line">					<span class="keyword">int</span> tmp = a;</div><div class="line">					a = c;</div><div class="line">					c = tmp;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=c;i++)&#123;</div><div class="line">					<span class="keyword">if</span>( <span class="built_in">map</span>[i][b] == <span class="string">'|'</span> )&#123;</div><div class="line">						<span class="built_in">map</span>[i][b] = <span class="string">'+'</span>;</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[i][b] == <span class="string">'+'</span> )&#123;</div><div class="line">						</div><div class="line">					&#125;<span class="keyword">else</span></div><div class="line">						<span class="built_in">map</span>[i][b] = <span class="string">'-'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;ch;</div><div class="line">			color(a,b,ch);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>[j][i] == <span class="number">-1</span>)&#123;</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">'.'</span>;</div><div class="line">			&#125;<span class="keyword">else</span></div><div class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="built_in">map</span>[j][i];</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题写出来不难，但是有个小细节要注意。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201604-3 csp 路径解析</title>
    <link href="http://yoursite.com/2017/03/13/201604-3-csp-%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2017/03/13/201604-3-csp-路径解析/</id>
    <published>2017-03-13T13:49:41.000Z</published>
    <updated>2017-03-28T08:57:49.920Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目思路很重要，一定不要想多了。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>不要建树。</p>
<p>不要建树。</p>
<p>不要建树。</p>
<p>因为这个字符串是有规律的，因而不需要建树来保存它们的关系，具体看代码吧，十分容易理解。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">string</span> pos_s;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; out;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;pos_s;</div><div class="line">	<span class="built_in">cin</span>.ignore();</div><div class="line">	<span class="keyword">while</span>(n--)&#123;</div><div class="line">		<span class="built_in">string</span> tmp;</div><div class="line">		<span class="keyword">int</span> pos = <span class="number">0</span>; </div><div class="line">		getline(<span class="built_in">cin</span>,tmp);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(tmp[<span class="number">0</span>] != <span class="string">'/'</span>)&#123; <span class="comment">//相对路径 </span></div><div class="line">			tmp = pos_s + <span class="string">'/'</span> + tmp;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(tmp.empty())&#123;</div><div class="line">			out.push_back(pos_s);</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//消除多个 // </span></div><div class="line">		pos = tmp.find_first_of(<span class="string">'/'</span>);</div><div class="line">		pos++;</div><div class="line">		<span class="keyword">while</span>( pos &lt; tmp.size() &amp;&amp; pos != <span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(tmp[pos<span class="number">-1</span>] == <span class="string">'/'</span> &amp;&amp; tmp[pos] == <span class="string">'/'</span>)&#123;</div><div class="line">				<span class="keyword">int</span> j = pos;</div><div class="line">				<span class="keyword">while</span>(tmp[j] == <span class="string">'/'</span>) j++;</div><div class="line">				tmp.erase(pos,j-pos);   <span class="comment">// 开始位置，删除数量 </span></div><div class="line">			&#125;</div><div class="line">			pos++;</div><div class="line">		&#125;</div><div class="line">		pos = tmp.find(<span class="string">"/./"</span>);</div><div class="line">		<span class="keyword">while</span>( pos != <span class="number">-1</span>)&#123;</div><div class="line">			tmp.erase(pos,<span class="number">2</span>);</div><div class="line">			pos = tmp.find(<span class="string">"/./"</span>);</div><div class="line">		&#125; </div><div class="line">		pos = tmp.find(<span class="string">"/../"</span>);</div><div class="line">		<span class="keyword">while</span>( pos != <span class="number">-1</span>)&#123;</div><div class="line">			tmp.erase(pos+<span class="number">1</span>,<span class="number">3</span>);</div><div class="line">			<span class="keyword">int</span> pre = pos<span class="number">-1</span>;</div><div class="line">			<span class="keyword">while</span>( pre &gt;=<span class="number">0</span> &amp;&amp; tmp[pre] != <span class="string">'/'</span>) pre--;</div><div class="line">			<span class="keyword">if</span>( pre != <span class="number">-1</span>)&#123;</div><div class="line">				tmp.erase(pre,pos-pre);</div><div class="line">			&#125;</div><div class="line">			pos = tmp.find(<span class="string">"/../"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>( tmp.size() != <span class="number">1</span> &amp;&amp; tmp[tmp.size()<span class="number">-1</span>] == <span class="string">'/'</span>)&#123;</div><div class="line">			tmp.erase(tmp.size()<span class="number">-1</span>,<span class="number">1</span>);</div><div class="line">		&#125; </div><div class="line">		out.push_back(tmp);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;out.size();i++)</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;out[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目思路很重要，一定不要想多了。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201609-3 csp 炉石传说</title>
    <link href="http://yoursite.com/2017/03/13/201609-3-csp-%E7%82%89%E7%9F%B3%E4%BC%A0%E8%AF%B4/"/>
    <id>http://yoursite.com/2017/03/13/201609-3-csp-炉石传说/</id>
    <published>2017-03-13T13:46:34.000Z</published>
    <updated>2017-03-28T08:57:52.268Z</updated>
    
    <content type="html"><![CDATA[<p>较近一次的csp题目，依旧是典型的模拟题。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>依照题意，一步一步模拟即可，十分简单。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</div><div class="line">	<span class="keyword">int</span> health;</div><div class="line">	<span class="keyword">int</span> attack;</div><div class="line">&#125;Role;</div><div class="line"><span class="built_in">vector</span>&lt;Role&gt; f_role;</div><div class="line"><span class="built_in">vector</span>&lt;Role&gt; s_role;</div><div class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">summon</span><span class="params">(<span class="keyword">bool</span> is_first, <span class="keyword">int</span> pos, <span class="keyword">int</span> att, <span class="keyword">int</span> heal)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(is_first)&#123;<span class="comment">// f_role 回合 </span></div><div class="line">		Role role;	</div><div class="line">		role.health = heal;</div><div class="line">		role.attack = att;</div><div class="line">		<span class="keyword">if</span>( pos==f_role.size() )&#123;</div><div class="line">			f_role.push_back(role);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			f_role.insert(f_role.begin()+pos,role);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		Role role;	</div><div class="line">		role.health = heal;</div><div class="line">		role.attack = att;</div><div class="line">		<span class="keyword">if</span>( pos==s_role.size() )&#123;</div><div class="line">			s_role.push_back(role);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			s_role.insert(s_role.begin()+pos,role);</div><div class="line">		&#125;</div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">(<span class="keyword">bool</span> is_first, <span class="keyword">int</span> from_pos, <span class="keyword">int</span> to_pos)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(is_first)&#123;<span class="comment">// f_role 回合 </span></div><div class="line">		f_role[from_pos].health -= s_role[to_pos].attack;</div><div class="line">		s_role[to_pos].health -= f_role[from_pos].attack;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>( f_role[from_pos].health &lt;= <span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(from_pos == <span class="number">0</span>)&#123;</div><div class="line">				res = <span class="number">-1</span>;    <span class="comment">//后手玩家获胜 </span></div><div class="line">			&#125;<span class="keyword">else</span>	</div><div class="line">			f_role.erase(f_role.begin()+from_pos);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(s_role[to_pos].health &lt;= <span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(to_pos == <span class="number">0</span>)&#123;</div><div class="line">				res = <span class="number">1</span>;    <span class="comment">//先手玩家获胜 </span></div><div class="line">			&#125;<span class="keyword">else</span></div><div class="line">			s_role.erase(s_role.begin()+to_pos);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		f_role[to_pos].health -= s_role[from_pos].attack;</div><div class="line">		s_role[from_pos].health -= f_role[to_pos].attack;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(f_role[to_pos].health &lt;= <span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(to_pos == <span class="number">0</span>)&#123;</div><div class="line">				res = <span class="number">-1</span>;    <span class="comment">//后手玩家获胜 </span></div><div class="line">			&#125;<span class="keyword">else</span></div><div class="line">			f_role.erase(f_role.begin()+to_pos);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>( s_role[from_pos].health &lt;= <span class="number">0</span> )&#123;</div><div class="line">			<span class="keyword">if</span>(from_pos == <span class="number">0</span>)&#123;</div><div class="line">				res = <span class="number">1</span>;    <span class="comment">//先手玩家获胜 </span></div><div class="line">			&#125;<span class="keyword">else</span></div><div class="line">			s_role.erase(s_role.begin()+from_pos);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	Role role;</div><div class="line">	<span class="keyword">bool</span> is_first = <span class="literal">true</span>;</div><div class="line">	</div><div class="line">	role.health = <span class="number">30</span>;</div><div class="line">	role.attack = <span class="number">0</span>;</div><div class="line">	f_role.push_back(role);</div><div class="line">	s_role.push_back(role);</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">	</div><div class="line">	<span class="keyword">while</span>(n--)&#123;</div><div class="line">		<span class="built_in">string</span> s0;</div><div class="line">		<span class="keyword">int</span> a,b,c;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s0;</div><div class="line">		<span class="keyword">if</span>(s0 == <span class="string">"summon"</span>)&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</div><div class="line">			summon(is_first,a,b,c);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s0 == <span class="string">"attack"</span>)&#123;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">			attack(is_first,a,b);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s0 == <span class="string">"end"</span>)&#123;</div><div class="line">			is_first = !is_first;</div><div class="line">		&#125;</div><div class="line">	&#125; </div><div class="line">	<span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;f_role[<span class="number">0</span>].health&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">vector</span>&lt;Role&gt;::iterator it = f_role.begin();</div><div class="line">	it++;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;f_role.size()<span class="number">-1</span>;</div><div class="line">	<span class="keyword">while</span>(it!=f_role.end())&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;it-&gt;health;</div><div class="line">		it++;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;s_role[<span class="number">0</span>].health&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	it = s_role.begin();</div><div class="line">	it++;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;s_role.size()<span class="number">-1</span>;</div><div class="line">	<span class="keyword">while</span>(it!=s_role.end())&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;it-&gt;health;</div><div class="line">		it++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;较近一次的csp题目，依旧是典型的模拟题。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201612-3 csp 权限查询</title>
    <link href="http://yoursite.com/2017/03/13/201612-3-csp-%E6%9D%83%E9%99%90%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2017/03/13/201612-3-csp-权限查询/</id>
    <published>2017-03-13T13:40:07.000Z</published>
    <updated>2017-03-23T11:55:46.727Z</updated>
    
    <content type="html"><![CDATA[<p>这是最近一次的csp题目，第三题就是典型的模拟题，并且这题还非常地大。。。俗称大模拟<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>依照题意，一步一步模拟即可。</p>
<p>两个注意点：使用map会十分方便，权限种类10种是0-9而非1-10.</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 权限的种类10种 从0 - 9 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> out_false -2 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> out_true -1 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NO_LEVEL -1 </span></div><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; category;</div><div class="line"><span class="built_in">map</span>&lt; <span class="built_in">string</span>, <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; &gt; role;</div><div class="line"><span class="built_in">map</span>&lt; <span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; user;</div><div class="line"><span class="keyword">int</span> answer[<span class="number">10000</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> p,r,u,q;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;p;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</div><div class="line">		<span class="built_in">string</span> s,tmp;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s;</div><div class="line">		<span class="keyword">int</span> fen = s.find_first_of(<span class="string">':'</span>);</div><div class="line">		<span class="keyword">if</span>(fen == <span class="number">-1</span>)&#123;</div><div class="line">			category[s] = <span class="number">0</span>;</div><div class="line">		<span class="comment">//	cout&lt;&lt;s&lt;&lt;"|level:"&lt;&lt;category[s]&lt;&lt;endl;</span></div><div class="line">			<span class="keyword">continue</span>;	</div><div class="line">		&#125;</div><div class="line">		tmp = s.substr( <span class="number">0</span>, fen );</div><div class="line">		<span class="keyword">if</span>( s[fen+<span class="number">2</span>] == <span class="string">'\0'</span>)&#123;</div><div class="line">			category[tmp] = s[fen+<span class="number">1</span>]-<span class="string">'0'</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			category[tmp] = <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line"><span class="comment">//		cout&lt;&lt;tmp&lt;&lt;"|level:"&lt;&lt;category[tmp]&lt;&lt;endl;</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;r;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</div><div class="line">		<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; role_c;</div><div class="line">		<span class="built_in">string</span> role_s;</div><div class="line">		<span class="keyword">int</span> role_int;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;role_s;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;role_int;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;role_int;j++)&#123;</div><div class="line">			<span class="built_in">string</span> s,tmp;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;s;</div><div class="line">			</div><div class="line">			<span class="keyword">int</span> fen = s.find_first_of(<span class="string">':'</span>);</div><div class="line">			<span class="keyword">if</span>(fen == <span class="number">-1</span>)&#123;</div><div class="line">				role_c[s] = NO_LEVEL;</div><div class="line">			</div><div class="line">				<span class="keyword">continue</span>;	</div><div class="line">			&#125;</div><div class="line">			tmp = s.substr( <span class="number">0</span>, fen );</div><div class="line">			<span class="keyword">if</span>( s[fen+<span class="number">2</span>] == <span class="string">'\0'</span>)&#123;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span>(role_c.find(tmp) != role_c.end())&#123;</div><div class="line">					<span class="keyword">int</span> old = role_c[tmp];</div><div class="line">					role_c[tmp] = old &gt; s[fen+<span class="number">1</span>]-<span class="string">'0'</span> ? old: s[fen+<span class="number">1</span>]-<span class="string">'0'</span>;</div><div class="line">				&#125;<span class="keyword">else</span></div><div class="line">					role_c[tmp] = s[fen+<span class="number">1</span>]-<span class="string">'0'</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				role_c[tmp] = <span class="number">10</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		role[role_s] = role_c;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;u;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;u;i++)&#123;</div><div class="line">		<span class="built_in">string</span> user_s;</div><div class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; user_r;</div><div class="line">		<span class="keyword">int</span> user_n;</div><div class="line">		</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;user_s;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;user_n;</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;user_n;j++)&#123;</div><div class="line">			<span class="built_in">string</span> tmp;</div><div class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</div><div class="line">			user_r.push_back(tmp);</div><div class="line">		&#125;</div><div class="line">		user[user_s] = user_r;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;q;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</div><div class="line">		<span class="built_in">string</span> s_user,cmd;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s_user&gt;&gt;cmd;</div><div class="line">		<span class="keyword">if</span>( user.find(s_user) != user.end() )&#123; <span class="comment">//存在 </span></div><div class="line">			<span class="keyword">int</span> fen = cmd.find_first_of(<span class="string">':'</span>);</div><div class="line">			<span class="keyword">if</span>( fen == <span class="number">-1</span> )&#123;  <span class="comment">//没有分号 、无等级查询  输出false、true 数字 </span></div><div class="line">				<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v_role = user[s_user];</div><div class="line">				<span class="comment">// 默认输出为false（当cmd命令是无等级的，且在role中未找到cmd命令） </span></div><div class="line">				<span class="keyword">int</span> level = out_false;		</div><div class="line">				<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it = v_role.begin();</div><div class="line">				<span class="keyword">while</span>(it != v_role.end())&#123;</div><div class="line">					<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; tmp = role[*it];</div><div class="line">					<span class="keyword">if</span>(tmp.find(cmd) != tmp.end())&#123; <span class="comment">// 存在cmd 命令 </span></div><div class="line">						<span class="keyword">if</span>(tmp[cmd] == NO_LEVEL)&#123;    <span class="comment">// cmd命令是无等级的，因而输出true </span></div><div class="line">							level = out_true;		<span class="comment">// 输出为true </span></div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						&#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp[cmd] &gt; level)&#123;</div><div class="line">							level = tmp[cmd];</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					it++;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				answer[i] = level;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;  <span class="comment">// 有分号 、带等级查询  f / t </span></div><div class="line">				<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v_role = user[s_user];</div><div class="line">				<span class="keyword">int</span> query_level;</div><div class="line">				<span class="keyword">if</span>(cmd[fen+<span class="number">2</span>] == <span class="string">'\0'</span>)&#123;</div><div class="line">					query_level= cmd[fen+<span class="number">1</span>] - <span class="string">'0'</span>;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					query_level= <span class="number">10</span>;</div><div class="line">				&#125;</div><div class="line">				cmd = cmd.substr(<span class="number">0</span>,fen);</div><div class="line">				answer[i] = out_false;  <span class="comment">// 默认输出false </span></div><div class="line">				<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it = v_role.begin();</div><div class="line">				<span class="keyword">while</span>(it != v_role.end())&#123;</div><div class="line">					<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; tmp = role[*it];</div><div class="line">					<span class="keyword">if</span>(tmp.find(cmd) != tmp.end())&#123;</div><div class="line">						<span class="keyword">if</span>(tmp[cmd] == NO_LEVEL)&#123;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						&#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp[cmd] &gt;= query_level)&#123;</div><div class="line">							answer[i] = out_true;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					it++;</div><div class="line">				&#125;</div><div class="line">			&#125;	</div><div class="line">		&#125;<span class="keyword">else</span>&#123;<span class="comment">//没有 user </span></div><div class="line">			answer[i] = out_false; <span class="comment">//输出false	</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(answer[i] == out_true)&#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"true"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(answer[i] == out_false)&#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"false"</span>&lt;&lt;<span class="built_in">endl</span>;	</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;answer[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是最近一次的csp题目，第三题就是典型的模拟题，并且这题还非常地大。。。俗称大模拟&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201612-4 csp dp</title>
    <link href="http://yoursite.com/2017/03/13/201612-4-csp-dp/"/>
    <id>http://yoursite.com/2017/03/13/201612-4-csp-dp/</id>
    <published>2017-03-13T10:02:23.000Z</published>
    <updated>2017-03-23T11:55:43.998Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目，当初考试时候也做过，一脸懵逼的瞎碰了10分。后来才知道可以用动态规划来写，找到了状态转移方程就十分简单。<br><a id="more"></a></p>
<h3 id="首先证明一下csp练习题的OJ给的算法耗时是假的"><a href="#首先证明一下csp练习题的OJ给的算法耗时是假的" class="headerlink" title="首先证明一下csp练习题的OJ给的算法耗时是假的"></a>首先证明一下csp练习题的OJ给的算法耗时是假的</h3><p><img src="http://liukun.tech/pic/time_csp.png" alt=""></p>
<p>我的O(n3)时间复杂度的代码，和O(n2)的时间对比，但是提交上去都是500ms左右，虽然这道题的限制用时是3s，依然没有超时，但感觉怪怪的。</p>
<p>另外也经常发现，两次提交同样的代码，跑的时间也不一样。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于题目中要求最终要按照字典序，因而只能每次合并相邻的两个频率，这就与矩阵链相乘十分相似。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 程序算法时间复杂度是 O(n3)的，而且数据量n = 1000，那么就是十亿数量级的</span></div><div class="line"><span class="comment">// 本以为的会超时，但是居然没有！ </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="keyword">struct</span> Node&#123;</div><div class="line">	<span class="keyword">int</span> cost;</div><div class="line">	<span class="keyword">int</span> base;</div><div class="line">&#125;;</div><div class="line">Node dp[<span class="number">1000</span>][<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n, t;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">	<span class="keyword">while</span>(n--)&#123;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">		data.push_back(t);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> len = data.size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">		dp[i][i].base = <span class="number">0</span>;</div><div class="line">		dp[i][i].cost = data[i];</div><div class="line">		<span class="comment">// 第i列 从下向上填充 j不断减少 </span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">			<span class="comment">//求出 dp[j][i]的最优解 </span></div><div class="line">			<span class="keyword">int</span> min_cost = INF, base=<span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k+j&lt;i; k++)&#123;</div><div class="line">				<span class="keyword">int</span> cost = dp[j][j+k].cost + dp[j+k+<span class="number">1</span>][i].cost + dp[j][j+k].base + dp[j+k+<span class="number">1</span>][i].base;</div><div class="line">				min_cost = min(cost,min_cost) ;</div><div class="line">				base += data[k+j];</div><div class="line">			&#125;</div><div class="line">			dp[j][i].cost = min_cost;</div><div class="line">			dp[j][i].base = base + data[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][len<span class="number">-1</span>].cost&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目，当初考试时候也做过，一脸懵逼的瞎碰了10分。后来才知道可以用动态规划来写，找到了状态转移方程就十分简单。&lt;br&gt;
    
    </summary>
    
      <category term="career" scheme="http://yoursite.com/categories/career/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
</feed>
