<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leroy</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-13T10:07:27.512Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leroy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>201612-4 csp dp</title>
    <link href="http://yoursite.com/2017/03/13/201612-4-csp-dp/"/>
    <id>http://yoursite.com/2017/03/13/201612-4-csp-dp/</id>
    <published>2017-03-13T10:02:23.000Z</published>
    <updated>2017-03-13T10:07:27.512Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目，当初考试时候也做过，一脸懵逼的瞎碰了10分。后来才知道可以用动态规划来写，找到了状态转移方程就十分简单。<br><a id="more"></a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于题目中要求最终要按照字典序，因而只能每次合并相邻的两个频率，这就与矩阵链相乘十分相似。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 程序算法时间复杂度是 O(n3)的，而且数据量n = 1000，那么就是十亿数量级的</span></div><div class="line"><span class="comment">// 本以为的会超时，但是居然没有！ </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="keyword">struct</span> Node&#123;</div><div class="line">	<span class="keyword">int</span> cost;</div><div class="line">	<span class="keyword">int</span> base;</div><div class="line">&#125;;</div><div class="line">Node dp[<span class="number">1000</span>][<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n, t;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">	<span class="keyword">while</span>(n--)&#123;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">		data.push_back(t);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> len = data.size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">		dp[i][i].base = <span class="number">0</span>;</div><div class="line">		dp[i][i].cost = data[i];</div><div class="line">		<span class="comment">// 第i列 从下向上填充 j不断减少 </span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">			<span class="comment">//求出 dp[j][i]的最优解 </span></div><div class="line">			<span class="keyword">int</span> min_cost = INF, base=<span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k+j&lt;i; k++)&#123;</div><div class="line">				<span class="keyword">int</span> cost = dp[j][j+k].cost + dp[j+k+<span class="number">1</span>][i].cost + dp[j][j+k].base + dp[j+k+<span class="number">1</span>][i].base;</div><div class="line">				min_cost = min(cost,min_cost) ;</div><div class="line">				base += data[k+j];</div><div class="line">			&#125;</div><div class="line">			dp[j][i].cost = min_cost;</div><div class="line">			dp[j][i].base = base + data[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][len<span class="number">-1</span>].cost&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题目，当初考试时候也做过，一脸懵逼的瞎碰了10分。后来才知道可以用动态规划来写，找到了状态转移方程就十分简单。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>201412-4 csp 最小生成树</title>
    <link href="http://yoursite.com/2017/03/13/201412-4-csp-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://yoursite.com/2017/03/13/201412-4-csp-最小生成树/</id>
    <published>2017-03-13T09:56:48.000Z</published>
    <updated>2017-03-13T09:58:36.850Z</updated>
    
    <content type="html"><![CDATA[<p>毫无坑点，直接用Kruskal 算法即可。算法思想也比较简单，直接参见代码即可<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最小生成树  Kruskal 算法</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 100000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxE 100000</span></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">	<span class="keyword">int</span> fm, to ,dist;</div><div class="line">&#125;e[maxE];</div><div class="line"><span class="keyword">int</span> fa[maxV], n, m;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.dist &lt; b.dist;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;  <span class="comment">//在并查集森林中找到x的祖先 </span></div><div class="line">	<span class="keyword">if</span>(fa[x] == x) <span class="keyword">return</span> fa[x];</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> fa[x] = getfa(fa[x]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> getfa(x) == getfa(y);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> fax = getfa(x), fay = getfa(y);</div><div class="line">	fa[fax] = fay;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;e[i].fm&gt;&gt;e[i].to&gt;&gt;e[i].dist;</div><div class="line">	sort(e+<span class="number">1</span>,e+m+<span class="number">1</span>,cmp); <span class="comment">// 对边按权值进行升序排序</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		fa[i] = i;</div><div class="line">	<span class="keyword">int</span> rst = n, ans = <span class="number">0</span>; <span class="comment">//rst 表示目前的点共存于多少个集合中</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m &amp;&amp; rst&gt;<span class="number">1</span>; i++)&#123;</div><div class="line">		<span class="keyword">int</span> x = e[i].fm, y = e[i].to;</div><div class="line">		<span class="keyword">if</span>(same(x,y)) <span class="keyword">continue</span>;  <span class="comment">//如果两个点存在同一集合中</span></div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			merge(x,y); <span class="comment">//将两个点合并到同一集 </span></div><div class="line">			rst--; <span class="comment">//合并集合后，集合数目减一 </span></div><div class="line">			ans += e[i].dist;</div><div class="line">		&#125;	</div><div class="line">	&#125; </div><div class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毫无坑点，直接用Kruskal 算法即可。算法思想也比较简单，直接参见代码即可&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>201312-4 csp 有趣的数</title>
    <link href="http://yoursite.com/2017/03/13/201312-4-csp-%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0/"/>
    <id>http://yoursite.com/2017/03/13/201312-4-csp-有趣的数/</id>
    <published>2017-03-13T08:35:50.000Z</published>
    <updated>2017-03-13T08:49:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>这题是一个排列组合问题，只要建模完成就很容易写出来。<br><a id="more"></a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　我们把一个数称为有趣的，当且仅当：</p>
<ol>
<li>它的数字只包含0, 1, 2, 3，且这四个数字都出现过至少一次。</li>
<li>所有的0都出现在所有的1之前，而所有的2都出现在所有的3之前。</li>
<li>最高位数字不为0。
　　</li>
</ol>
<p>因此，符合我们定义的最小的有趣的数是2013。除此以外，4位的有趣的数还有两个：2031和2301。
　　</p>
<p>请计算恰好有n位的有趣的数的个数。由于答案可能非常大，只需要输出答案除以1000000007的余数。</p>
<p>输入格式
　　</p>
<p>输入只有一行，包括恰好一个正整数n (4 ≤ n ≤ 1000)。</p>
<p>输出格式
　　</p>
<p>输出只有一行，包括恰好n 位的整数中有趣的数的个数除以1000000007的余数。</p>
<p>样例输入</p>
<p>4</p>
<p>样例输出</p>
<p>3</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先我们假设数字0的个数为a，1的个数为b，同时依据题目限制条件则有：a+b &lt;= n-2(因为2、3必须出现至少一次)。那么对于a个0和b个1组成的有趣的数有多少个呢？</p>
<ol>
<li>首先从n-1个（因为总共n位数，且第一位必为2，可以思考一下为什么）位置中取出a+b个位置用来放置0、1，有C[n-1][a+b]中情况；</li>
<li>这时，0、1的位置也就已经确定了，思考一下为什么。那就开始考虑一下2、3的位置，首先知道2、3的总数目为 n-a-b-1 ，而2又必须在3之前，那么我们只要找到第一个出现3的位置即可，很简单必然是 n-a-b-2种情况。</li>
</ol>
<p>这样我们就可以得到对于a个0和b个1组成的有趣的数有 C[n-1][a+b]*(n-a-b-1) 个。最后我们只要遍取一下所有可能的a和b即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1001 </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1000000007</span>;</div><div class="line"><span class="keyword">int</span> c[maxn][maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">init</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p; i++)&#123;</div><div class="line">		c[i][<span class="number">0</span>] = c[i][i] = <span class="number">1</span>;</div><div class="line">		c[i][<span class="number">1</span>] = c[i][i<span class="number">-1</span>] = i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>; <span class="number">2</span>*j&lt;=i; j++)&#123;</div><div class="line">			c[i][j] = (c[i<span class="number">-1</span>][j<span class="number">-1</span>] + c[i<span class="number">-1</span>][j])%mod;</div><div class="line">			c[i][i-j] = c[i][j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">	init(n<span class="number">-1</span>);</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>; a&lt;=n<span class="number">-3</span>; a++)&#123;</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">int</span> b=<span class="number">1</span>; b+a&lt;=n<span class="number">-2</span>; b++)&#123;</div><div class="line">			<span class="keyword">long</span> <span class="keyword">long</span> tmp1 = c[n<span class="number">-1</span>][a+b], tmp2;</div><div class="line">			tmp2 = n-a-b<span class="number">-1</span>;</div><div class="line">			tmp1 = ( tmp1*tmp2 )% mod;</div><div class="line">			res += tmp1;</div><div class="line">			res %= mod;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这题是一个排列组合问题，只要建模完成就很容易写出来。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>Tarjan csp-201509-4</title>
    <link href="http://yoursite.com/2017/03/13/Tarjan%20csp-201509-4/"/>
    <id>http://yoursite.com/2017/03/13/Tarjan csp-201509-4/</id>
    <published>2017-03-13T06:28:52.000Z</published>
    <updated>2017-03-13T08:08:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tarjan-算法"><a href="#Tarjan-算法" class="headerlink" title="Tarjan 算法"></a>Tarjan 算法</h2><p>任选一结点开始进行深度优先搜索（若深度优先搜索结束后仍有未访问的结点，则再从中任选一点再次进行）。搜索过程中已访问的结点不再访问。搜索树的若干子树构成了图的强连通分量。</p>
<p>结点按照被访问的顺序存入栈中。从搜索树的子树返回至一个结点时，检查该结点是否是某一强连通分量的根结点（见下）并将其从栈中删除。如果某结点是强连通分量的根，则在它之前出栈且还不属于其他强连通分量的结点构成了该结点所在的强连通分量。</p>
<p><img src="http://liukun.tech/pic/targan.gif" alt=""></p>
<h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><p>定义 DFN(u) 为节点 u 搜索的次序编号(时间戳)，Low(u) 为 u 或 u 的子树能够追溯到的最早的栈中节点的次序号。由定义可以得出，<br><img src="http://liukun.tech/pic/targan.png" alt=""></p>
<ol>
<li>遍历一个点，得到时间戳 DFN[i]，并计算由该点可追溯到的最老时间戳 LOW[i]。</li>
<li>枚举该点的所有边，若 DFN[j]=0，DFN[j]=0 表明未被搜索过，递归搜索之。</li>
<li>若 DFN[j] 不为 0，则 j 被搜索过，判断 j 是否在栈中，且 j 的时间戳 DFN[j] 小于当前时间戳 DFN[i]，可判定成环。将 LOW[i] 更新成 DFN[j]。</li>
<li>若这个点 LOW[i] 和 DFN[i] 相等，说明这个节点是所有强连通分量的元素中在栈中最早的节点，将该强连通分量全部弹出。</li>
</ol>
<p>时间复杂度是 O( ∣V∣ + ∣E∣ )。</p>
<h2 id="应用-201509-4-csp"><a href="#应用-201509-4-csp" class="headerlink" title="应用 201509-4 csp"></a>应用 201509-4 csp</h2><p>使用targan算法 毫无坑点</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最大连通分支 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001</span></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">	<span class="keyword">int</span> from,to;</div><div class="line">	Edge(<span class="keyword">int</span> x,<span class="keyword">int</span> y):from(x),to(y)&#123;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; edges;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> dfn[maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> low[maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> BcntEach[maxn];</div><div class="line"><span class="keyword">bool</span> inStack[maxn] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> Dindex;</div><div class="line"><span class="keyword">int</span> N,M;</div><div class="line"><span class="keyword">int</span> Bcnt = <span class="number">0</span>;  <span class="comment">// 强联通分支个数</span></div><div class="line"><span class="keyword">int</span> Stap[maxn] ; <span class="comment">//模拟栈</span></div><div class="line"><span class="keyword">int</span> stop;  <span class="comment">//栈的元素个数,即栈顶元素位置 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">	edges.push_back(Edge(from,to));</div><div class="line">	G[from].push_back(edges.size()<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">targan</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> j;</div><div class="line">	dfn[i] = low[i] = ++Dindex;</div><div class="line">	inStack[i] = <span class="literal">true</span>;</div><div class="line">	Stap[++stop] = i;</div><div class="line">	<span class="keyword">int</span> len = G[i].size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;len; k++)&#123;</div><div class="line">		j = edges[ G[i][k] ].to;</div><div class="line">		<span class="keyword">if</span>( !dfn[j] )&#123;</div><div class="line">			targan(j);</div><div class="line">			low[i] = min(low[i],low[j]);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>( inStack[j] &amp;&amp; dfn[j]&lt;low[i] )&#123;</div><div class="line">			low[i] = dfn[j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( dfn[i] == low[i] )&#123;</div><div class="line">		Bcnt++;</div><div class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">		<span class="keyword">do</span>&#123;</div><div class="line">			j = Stap[stop--];</div><div class="line">			inStack[j] = <span class="literal">false</span>;</div><div class="line">			cnt++;</div><div class="line">		&#125;<span class="keyword">while</span>(j!=i);</div><div class="line">		BcntEach[Bcnt] = cnt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	stop = Bcnt = Dindex = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)&#123;</div><div class="line">		<span class="keyword">if</span>( !dfn[i] )</div><div class="line">			targan(i);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</div><div class="line">	<span class="keyword">while</span>(M--)&#123;</div><div class="line">		<span class="keyword">int</span> a,b;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">		addEdge(a,b);</div><div class="line">	&#125;</div><div class="line">	solve();</div><div class="line">	<span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Bcnt;i++)&#123;</div><div class="line">		<span class="keyword">int</span> x = BcntEach[i];</div><div class="line">		res += (x<span class="number">-1</span>)*x/<span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tarjan-算法&quot;&gt;&lt;a href=&quot;#Tarjan-算法&quot; class=&quot;headerlink&quot; title=&quot;Tarjan 算法&quot;&gt;&lt;/a&gt;Tarjan 算法&lt;/h2&gt;&lt;p&gt;任选一结点开始进行深度优先搜索（若深度优先搜索结束后仍有未访问的结点，则再从中任选一
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>csp-201403-3</title>
    <link href="http://yoursite.com/2017/03/01/csp-201403-3/"/>
    <id>http://yoursite.com/2017/03/01/csp-201403-3/</id>
    <published>2017-03-01T14:59:39.000Z</published>
    <updated>2017-03-13T08:11:18.004Z</updated>
    
    <content type="html"><![CDATA[<p>在同学的帮助下，终于解决了,这个简单的题目总算拿了100分。<br><a id="more"></a><br>-3.01</p>
<pre><code>先就只放代码吧，后面解决了再补充吧。 (ง •_•)ง  
</code></pre><p>-3.05</p>
<pre><code>终于解决了！

后来的90分，则是在机智的同学帮助下，发现了两个问题： 
</code></pre><ol>
<li>“ls” 命令中可能存在 ‘-‘；    </li>
<li>两个选项之间也可能有多个空格 ；</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 100了  1. ls中存在 '-'  2. 两个选项之间可能有多个空格 3.要分析题目中隐含的各种可能 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">int</span> p[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 1: 无参数 ，2 带参数， 0 未用上 </span></div><div class="line"><span class="built_in">string</span> para[<span class="number">20</span>][<span class="number">26</span>];</div><div class="line"><span class="keyword">int</span> cmd[<span class="number">20</span>][<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 1: 无参数 ，2 带参数， 0 未用上 </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("data.txt","r",stdin);</span></div><div class="line">	<span class="keyword">int</span> n,len=<span class="number">0</span>;</div><div class="line">	<span class="built_in">string</span> s;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;s;</div><div class="line">	len = s.size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">		p[s[i]-<span class="string">'a'</span>]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(s[i+<span class="number">1</span>]==<span class="string">':'</span>)&#123;</div><div class="line">			p[s[i]-<span class="string">'a'</span>]++;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">	<span class="built_in">cin</span>.ignore(); <span class="comment">//去除非有效字符 </span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">		s.clear();</div><div class="line">		getline(<span class="built_in">cin</span>,s);</div><div class="line">		len = s.size();</div><div class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="comment">//找到第一个空格的位置，也就是忽略 ls ，同时 ls中可能包含 '-' </span></div><div class="line">		<span class="keyword">while</span>(s[j] != <span class="string">' '</span>) j++;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(;j&lt;len;j++)&#123;</div><div class="line">			<span class="keyword">if</span>(s[j] == <span class="string">'-'</span>)&#123;</div><div class="line">				j++;</div><div class="line">				<span class="keyword">if</span>(p[ s[j]-<span class="string">'a'</span> ] == <span class="number">1</span>)&#123;  <span class="comment">// 不带参数</span></div><div class="line">					cmd[i][ s[j]-<span class="string">'a'</span> ] = <span class="number">1</span>;</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(p[ s[j]-<span class="string">'a'</span> ] == <span class="number">2</span>)&#123;  <span class="comment">// 带参数</span></div><div class="line">					cmd[i][ s[j]-<span class="string">'a'</span> ] = <span class="number">2</span>;</div><div class="line">					<span class="keyword">int</span> f = s[j]-<span class="string">'a'</span>;</div><div class="line">					<span class="keyword">while</span>(s[++j]==<span class="string">' '</span>);</div><div class="line">					<span class="keyword">int</span> tmp = j;</div><div class="line">					<span class="comment">// 2017-3-2中午发现这里还要判断tmp是否超出len范围（当参数位于字符串最后时）</span></div><div class="line">					<span class="keyword">while</span>(s[j]!=<span class="string">' '</span>&amp;&amp; j &lt; len)</div><div class="line">					&#123;</div><div class="line">						j++;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">// 如果带参数选项后面没有带参数，则错误 *************</span></div><div class="line">					<span class="keyword">if</span>( j == tmp) <span class="keyword">break</span>;</div><div class="line">					para[i][ f ] = s.substr(tmp,j-tmp);</div><div class="line">					<span class="comment">// 2017-3-2早上发现这里substr的第二个参数应该是所截取字符串的长度，开始以为是终止位置</span></div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[j] != <span class="string">' '</span>)&#123; </div><div class="line">			<span class="comment">//  1、遇到不是空格 就肯定是不合要求的因而跳出，不处理后面的 </span></div><div class="line">			<span class="comment">//  2、这里还处理了 多次出现空格的情况 </span></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">":"</span>; </div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</div><div class="line">			<span class="keyword">char</span> t = j+<span class="string">'a'</span>;</div><div class="line">			<span class="keyword">if</span>(cmd[i][j] == <span class="number">1</span>)&#123;</div><div class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="string">"-"</span> &lt;&lt; t;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmd[i][j] == <span class="number">2</span>)&#123;</div><div class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="string">"-"</span> &lt;&lt; t &lt;&lt; <span class="string">" "</span>&lt;&lt; para[i][j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在同学的帮助下，终于解决了,这个简单的题目总算拿了100分。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="csp" scheme="http://yoursite.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>Android 架构初探</title>
    <link href="http://yoursite.com/2017/02/26/Android-%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2017/02/26/Android-架构初探/</id>
    <published>2017-02-26T14:23:42.000Z</published>
    <updated>2017-02-26T15:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>将项目分为了三个层级：模型层、核心层、界面层。模型层定义了所有的模型，即数据类型如UserBO；核心层处理所有业务逻辑，如判断邮箱格式、密码的md5转换；界面层就处理界面的展示。各个层级之间的依赖关系如下图</p>
<p><img src="http://liukun.tech/pic/android-jiagou-01.png" alt=""></p>
<h2 id="模型层"><a href="#模型层" class="headerlink" title="模型层"></a>模型层</h2><p>由上图，我们知道了模型层是被其他两层所依赖的，也就是说模型层定义的数据类型可以被其他两层引用。（这也很容易理解，因为数据实体类必然是最基础的，需要被引用而不是引用别人）</p>
<p>模型层虽然横跨所有层级，但确实最为简单易懂的。只不过是封装了所有数据实体类，基本上也是跟后端数据库的数据一致的。</p>
<h2 id="核心层"><a href="#核心层" class="headerlink" title="核心层"></a>核心层</h2><p>核心层依赖于模型层，也就是说核心层可以引用模型层的定义各种数据实体类。</p>
<p>本层中定义了两个接口，三个类（如还有需要可再定义），下面我们一一解释。</p>
<ul>
<li><p>接口 ActionCallbackListener<t></t></p>
<p>  我们看名字就知道它是一个回调监听器，并且后面带有一个泛型T，也可以让我们依据实际情况返回不同的数据。</p>
</li>
<li><p>接口 AppAction</p>
<p>  其中定义的是界面层需要使用的action，例如login、register。</p>
</li>
<li><p>类 AppActionImpl implements AppAction</p>
<p>  我们看到它继承了AppAction，也就是说 <strong>它将会实现AppAction中定义的虚函数</strong>。</p>
</li>
<li><p>类 ErrorEvent </p>
<p>  顾名思义，也就是完成错误码的一些相关定义。</p>
</li>
<li><p>类 EncryptUtil</p>
<p>  加密工具类，如完成md5转换。</p>
</li>
</ul>
<h2 id="界面层"><a href="#界面层" class="headerlink" title="界面层"></a>界面层</h2><p>界面层依赖于核心层和模型层。之所以依赖核心层，就是因为它把业务逻辑的相关操作都放到核心层了。</p>
<p>我们都知道界面层最复杂,也最容易变得混乱不堪，因而我们采用如下方法改善这一问题：</p>
<ul>
<li><p>根据不同类型划分包，分别为activity（各个活动类）、adapter、utils（工具类）、view（自定义界面）、fragment等。</p>
</li>
<li><p>对于activity、adapter、fragment，各自都有一个基类，做统一的处理，比如定义了一些共用的常量、对象和方法等。</p>
</li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>为了改变之前写项目的混乱，逛了逛github和知乎，就看到了Keegan小钢的<a href="http://keeganlee.me/post/android/20150605" target="_blank" rel="external">这篇博客</a>，感触最为深刻，因而也想下手敲敲代码，试一试。</p>
<p>感谢Keegan小钢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将项目分为了三个层级：模型层、核心层、界面层。模型层定义了所有的模型，即数据类型如UserBO；核心层处理所有业务逻辑，如判断邮箱格式、密码的md5转换；界面层就处理界面的展示。各个层级之间的依赖关系如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://liukun.te
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="Android 架构" scheme="http://yoursite.com/tags/Android-%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1-RomanToInt</title>
    <link href="http://yoursite.com/2017/02/25/leetcode-1-RomanToInt/"/>
    <id>http://yoursite.com/2017/02/25/leetcode-1-RomanToInt/</id>
    <published>2017-02-25T08:13:06.000Z</published>
    <updated>2017-02-25T15:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<p><a href="https://leetcode.com/problems/roman-to-integer/?tab=Description" target="_blank" rel="external">原题链接</a></p>
<h2 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h2><ul>
<li><p>第一感觉的歧途</p>
<p>  第一眼看到这道题，就想到了2016-12的csp第二道工资计算题，觉得似乎正着算比较麻烦（即通过罗马数字直接得到阿拉伯数字，因为考虑到罗马数字中有很多不同字母），而如果反过来通过阿拉伯数字得到罗马数字就非常简单。</p>
<p>  例如，对于阿拉伯数字 1999，只要分别得到千位、百位、十位、个位数字，再分别转换为罗马数字，最后拼接起来即可。</p>
<p>  于是乎，抱着 “正难则反” 的策略，我兴致勃勃地写了一个for循环，从1-3999遍历得到罗马数字，其中只要得到一个与输入罗马数字相同的字符串就停下来，也就得到了它的阿拉伯数字。</p>
<p>  但是！！！</p>
<p>  <img src="http://liukun.tech/pic/leetcode-1-TimeOut.png" alt=""></p>
<p>  一脸懵逼。我这么思路清晰、优美的代码居然超时了。</p>
<p>  <img src="http://liukun.tech/pic/leetcode-1-TimeOut_code.png" alt=""></p>
<p>  不过没关系，容我分析一波。既然它说我的代码超时了，又不告诉我时间用了多少就算超了，那我只好在自己电脑跑一下并输出用时。</p>
<p>  <img src="http://liukun.tech/pic/leetcode-1-TimeOut_myC.png" alt=""></p>
<p>  一看吓一跳，居然用时0ms，一开始我都是不信的，然后又跑了好几次，还换了计时的方法，最后发现结果都是0ms（只有一次是1ms）。后来还了解到clock()方式计时精确度一般在10ms左右，然后这里我测的时间都是0ms，显然不妥，于是，再找了一种更精确的计时方式，得到如下</p>
<p>  <img src="http://liukun.tech/pic/leetcode-1-CaculTime.png" alt=""></p>
<p>  这样看来用时并不多，那结论就是leetcode的OJ给跑测试用例的cpu不咋样，甚至不如我的电脑。。。虽然这个结论是我始料未及的，但是事实摆在这里</p>
</li>
</ul>
<blockquote>
<p>   (补)<strong>但是后来我发现，原来leetcode的用时计算的是所有用例的用时</strong>，不过通过与后来通过算法用时的对比，还是可以发现，仅一个用例也相差了0.332009-0.00669372ms，而leetcode使用了近4000个用例，也就是说正着算使用了大概1.2s，而反着只要27ms左右。原来超时就在这里。</p>
</blockquote>
<p><img src="http://liukun.tech/pic/embarrassed.gif" alt=""></p>
<ul>
<li><p>那就正面解决吧</p>
<p>  既然不能用每个阿拉伯数字都试一试，那就直接对输入的罗马数字进行处理吧。</p>
<p>  分析一下，发现千位只会出现 M ，百位只会出现 C、D、M ，类似地分析出十位、个位，那就依次找到罗马数字中的各个数位，再进行转换即可咯。（这时候发现，正面处理也是一点都不难。。。怪不得这是一道easy的题目， 0 0 ）</p>
<p>  三下五除二，就写出了如下代码，然后就AC了，很开心。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">   <span class="keyword">char</span>* p[<span class="number">4</span>][<span class="number">10</span>] = &#123;</div><div class="line">       &#123; <span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span> &#125;,</div><div class="line">       &#123; <span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span> &#125;,</div><div class="line">       &#123; <span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span> &#125;,</div><div class="line">       &#123; <span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;</div><div class="line">   &#125;;</div><div class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span>(s[i] == <span class="string">'M'</span>)&#123; <span class="comment">// thousand</span></div><div class="line">       i++;</div><div class="line">       ret += <span class="number">1000</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> j = i;  <span class="comment">// hundred</span></div><div class="line"><span class="keyword">while</span>(s[j] == <span class="string">'C'</span> || s[j] == <span class="string">'D'</span> || s[j] == <span class="string">'M'</span>)&#123;</div><div class="line">	j++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">string</span> tmp;</div><div class="line"><span class="keyword">if</span>( j != i)&#123;</div><div class="line">    tmp = s.substr(i,j-i);</div><div class="line">    i = j;</div><div class="line">   	j = <span class="number">1</span>;</div><div class="line">   	<span class="keyword">while</span>(tmp != p[<span class="number">2</span>][j])&#123;</div><div class="line">		j++;</div><div class="line">   	&#125;;</div><div class="line">	<span class="keyword">if</span>(j!=<span class="number">10</span>)</div><div class="line">  			ret = ret + j*<span class="number">100</span>;</div><div class="line">   	j = i;   </div><div class="line">&#125;</div><div class="line">	        <span class="comment">// ten-s</span></div><div class="line"><span class="keyword">while</span>(s[j] == <span class="string">'X'</span> || s[j] == <span class="string">'L'</span> || s[j] == <span class="string">'C'</span>)&#123;</div><div class="line">	j++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(j != i)&#123;</div><div class="line">    tmp = s.substr(i,j-i);</div><div class="line">   	i = j;</div><div class="line">   	j = <span class="number">1</span>;</div><div class="line">   	<span class="keyword">while</span>(tmp != p[<span class="number">1</span>][j])&#123;</div><div class="line">   		j++;</div><div class="line">   	&#125;;</div><div class="line">   	<span class="keyword">if</span>(j!=<span class="number">10</span>)</div><div class="line">   		ret = ret + j*<span class="number">10</span>;</div><div class="line">   	j = i;   </div><div class="line">&#125;	</div><div class="line">               <span class="comment">// last-digit</span></div><div class="line"><span class="keyword">while</span>(s[j] == <span class="string">'I'</span> || s[j] == <span class="string">'V'</span> || s[j] == <span class="string">'X'</span>)&#123;</div><div class="line">	j++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(j != i)&#123;</div><div class="line">    tmp = s.substr(i,j-i);</div><div class="line">   	i = j;</div><div class="line">   	j = <span class="number">1</span>;</div><div class="line">   	<span class="keyword">while</span>(tmp != p[<span class="number">0</span>][j])&#123;</div><div class="line">   		j++;</div><div class="line">   	&#125;;</div><div class="line">   	<span class="keyword">if</span>(j!=<span class="number">10</span>)</div><div class="line">   		ret = ret + j;    </div><div class="line">&#125;</div><div class="line">	</div><div class="line">   <span class="keyword">return</span> ret;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后我又把这个代码在自己电脑跑了一下，计算用时仅0.00669372ms（这个计时其实也有1ms左右的误差，但这么多不精确小数哪里来的我也不知道，觉得下次要专门研究一下计时函数），确实是比刚才第一种方法快了很多。</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p> stay hungry, stay foolish</p>
</blockquote>
<p>伟大如乔布斯也明白向他人学习的重要性，何况于我呢！</p>
<p>于是乎，我又孜孜不倦地去看了一看别人写的代码。</p>
<h3 id="the-first"><a href="#the-first" class="headerlink" title="the first"></a>the first</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//count every Symbol and add its value to the sum, and </span></div><div class="line"><span class="comment">//minus the extra part of special cases.</span></div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"IV"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">2</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"IX"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">2</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"XL"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">20</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"XC"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">20</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"CD"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">200</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"CM"</span>)!=<span class="number">-1</span>)&#123;sum-=<span class="number">200</span>;&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> c[]=s.toCharArray();</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(;count&lt;=s.length()<span class="number">-1</span>;count++)&#123;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'M'</span>) sum+=<span class="number">1000</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'D'</span>) sum+=<span class="number">500</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'C'</span>) sum+=<span class="number">100</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'L'</span>) sum+=<span class="number">50</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'X'</span>) sum+=<span class="number">10</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'V'</span>) sum+=<span class="number">5</span>;</div><div class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'I'</span>) sum+=<span class="number">1</span>;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div></pre></td></tr></table></figure>
<p>嗯。。。</p>
<p>这代码简单、明了、易懂，即使愚钝如我，也在看完之后立刻明白了它的原理，精确的抓住了罗马数字的特性！</p>
<p>对于I、V、X、L、C、D、M这些构成罗马数字的符号，每个符号都是代表了一个数值，并且对于VI、LX等，完全可以分别把每个单独的符号所代表的数值加起来；唯一例外的是 IV、IX、XL、XC、CD、CM这几个，因为他们小数值的符号出现在前面，而大数值的符号出现在后面，这样就不是单独加起来能够正确表达了，所以对于这些特例，只需要在前面就处理一下即可。</p>
<h3 id="The-second"><a href="#The-second" class="headerlink" title="The second"></a>The second</h3><p>而这第二个解法则是更加简单了，可是易读性却。。。。</p>
<p>不过，我略加思索，便明白了。嘿嘿(●ˇ∀ˇ●)</p>
<p>其实，就是把上一个解法加工了一下罢了，正是这句我刚说过的话启发了我：IV、IX、XL、XC、CD、CM这几个，因为他们小数值的符号出现在前面，而大数值的符号出现在后面，这样就不是单独加起来能够正确表达了。</p>
<p>在这个解法中，<strong>依据前一个符号与后一个符号表示数值的大小关系</strong>，来得到他们联合在一起表示的正确的值是多少。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Problem is simpler to solve by working the string from</span></div><div class="line"><span class="comment">//back to front and using a map. Runtime speed is 88 ms.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; T = &#123; &#123; <span class="string">'I'</span> , <span class="number">1</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'V'</span> , <span class="number">5</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'X'</span> , <span class="number">10</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'L'</span> , <span class="number">50</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'C'</span> , <span class="number">100</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'D'</span> , <span class="number">500</span> &#125;,</div><div class="line">                                   &#123; <span class="string">'M'</span> , <span class="number">1000</span> &#125; &#125;;</div><div class="line">                                   </div><div class="line">   <span class="keyword">int</span> sum = T[s.back()];</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) </div><div class="line">   &#123;</div><div class="line">       <span class="keyword">if</span> (T[s[i]] &lt; T[s[i + <span class="number">1</span>]])</div><div class="line">       &#123;</div><div class="line">           sum -= T[s[i]];</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span></div><div class="line">       &#123;</div><div class="line">           sum += T[s[i]];</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>思维要开阔，要多想想数据的特点，才能得到解题的关键点；</li>
<li>C++的定时函数需要研究一下；</li>
<li>我现在使用的还只是笨方法，继续加油吧 (ง •_•)ง</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Given a roman numeral, convert it to an integer.&lt;/
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>AsyncTask使用简介</title>
    <link href="http://yoursite.com/2017/02/20/AsyncTask/"/>
    <id>http://yoursite.com/2017/02/20/AsyncTask/</id>
    <published>2017-02-20T13:45:58.000Z</published>
    <updated>2017-02-23T07:17:13.896Z</updated>
    
    <content type="html"><![CDATA[<p>AsyncTask是Android提供的一个助手类，它对Thread和Handler进行了封装，方便我们使用。Android之所以提供AsyncTask这个类，就是为了方便我们在后台线程中执行耗时操作，然后将结果发送给主线程，从而在主线程中进行UI更新等操作。<br><a id="more"></a></p>
<h1 id="三个构造时的传入参数"><a href="#三个构造时的传入参数" class="headerlink" title="三个构造时的传入参数"></a>三个构造时的传入参数</h1><p>首先，AsyncTask构造时有三种泛型参数：Params, Progress 和 Result，如下</p>
<p><code>new AsyncTask&lt;Params, Progress, Result&gt; () {
}</code></p>
<ul>
<li>Params 表示用于AsyncTask执行任务的参数的类型</li>
<li>Progress 表示在后台线程处理的过程中，可以阶段性地发布结果的数据类型</li>
<li>Result 表示任务全部完成后所返回的数据类型</li>
</ul>
<h1 id="四个重要的回调方法"><a href="#四个重要的回调方法" class="headerlink" title="四个重要的回调方法"></a>四个重要的回调方法</h1><ul>
<li><h2 id="onPreExecute"><a href="#onPreExecute" class="headerlink" title="onPreExecute"></a>onPreExecute</h2><p>  <code>@MainThread</code></p>
<p>  <code>protect void onPreExecution () { }</code></p>
<p>  该方法有MainThread注解，表示该方法是运行在主线程中的。在AsyncTask执行了execute()方法后就会在UI线程上执行onPreExecute()方法，该方法在task真正执行前运行，我们通常可以在该方法中显示一个进度条，从而告知用户后台任务即将开始。</p>
</li>
<li><h2 id="doInBackground"><a href="#doInBackground" class="headerlink" title="doInBackground"></a>doInBackground</h2><p>  <code>@WorkThread</code></p>
<p>  <code>protect abstract Result doInBackground (Params... params) { }</code></p>
<p>  该方法有WorkerThread注解，表示该方法是运行在单独的工作线程中的，而不是运行在主线程中。doInBackground会在onPreExecute()方法执行完成后立即执行，该方法用于在工作线程中执行耗时任务，我们可以在该方法中编写我们需要在后台线程中运行的逻辑代码，由于是运行在工作线程中，所以该方法不会阻塞UI线程。该方法接收Params泛型参数，参数params是Params类型的不定长数组，该方法的返回值是Result泛型，由于doInBackgroud是抽象方法，我们在使用AsyncTask时必须重写该方法。在doInBackground中执行的任务可能要分解为好多步骤，每完成一步我们就可以通过调用AsyncTask的publishProgress(Progress…)将阶段性的处理结果发布出去，阶段性处理结果是Progress泛型类型。当调用了publishProgress方法后，处理结果会被传递到UI线程中，并在UI线程中回调onProgressUpdate方法，下面会详细介绍。根据我们的具体需要，我们可以在doInBackground中不调用publishProgress方法，当然也可以在该方法中多次调用publishProgress方法。doInBackgroud方法的返回值表示后台线程完成任务之后的结果。</p>
</li>
<li><h2 id="onProgressUpdate"><a href="#onProgressUpdate" class="headerlink" title="onProgressUpdate"></a>onProgressUpdate</h2><p>  <code>@MainThread</code></p>
<p>  <code>protect void onProgressUpdate (Progress... values) { }</code></p>
<p>  该方法也具有MainThread注解，表示该方法是在主线程上被调用的，且传入的参数是Progress泛型定义的不定长数组。如果在doInBackground中多次调用了publishProgress方法，那么主线程就会多次回调onProgressUpdate方法。  </p>
</li>
<li><h2 id="onPostExecute"><a href="#onPostExecute" class="headerlink" title="onPostExecute"></a>onPostExecute</h2><p>  <code>@MainThread</code></p>
<p>  <code>protect void onPostExecute (Result result) { }</code></p>
<p>  该方法也具有MainThread注解，表示该方法是在主线程中被调用的。当doInBackgroud方法执行完毕后，就表示任务完成了，doInBackgroud方法的返回值就会作为参数在主线程中传入到onPostExecute方法中，这样就可以在主线程中根据任务的执行结果更新UI。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AsyncTask是Android提供的一个助手类，它对Thread和Handler进行了封装，方便我们使用。Android之所以提供AsyncTask这个类，就是为了方便我们在后台线程中执行耗时操作，然后将结果发送给主线程，从而在主线程中进行UI更新等操作。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>First page</title>
    <link href="http://yoursite.com/2017/02/07/First-page/"/>
    <id>http://yoursite.com/2017/02/07/First-page/</id>
    <published>2017-02-07T09:56:35.000Z</published>
    <updated>2017-02-23T06:29:46.341Z</updated>
    
    <content type="html"><![CDATA[<p>  十分开心，终于搭建好了第一个blog。<br><a id="more"></a></p>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><ul>
<li><p>Markdown</p>
<p>由于博客的文章都是采用markdown来写的，所以有必要了解这个语法。</p>
<p>Markdown 的目标是实现「易读易写」。<a href="http://www.jianshu.com/p/f3fd881548ad" target="_blank" rel="external">这里</a>不仅介绍了atom的使用方法，还有Markdown的语法，我这第一篇文章便是用atom写的，虽然我最后还是准备投入Vscode的怀抱。</p>
</li>
<li><p>theme——<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">Maupassant</a></p>
<p>这是一个至简的主题，所以我喜欢，于是用了。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  十分开心，终于搭建好了第一个blog。&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="start" scheme="http://yoursite.com/tags/start/"/>
    
  </entry>
  
</feed>
